node {
  name: "global_step/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "global_step"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "global_step/Assign"
  op: "Assign"
  input: "global_step"
  input: "global_step/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "global_step/read"
  op: "Identity"
  input: "global_step"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "cond/Switch"
  op: "Switch"
  input: "IsVariableInitialized"
  input: "IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/switch_t"
  op: "Identity"
  input: "cond/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/switch_f"
  op: "Identity"
  input: "cond/Switch"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/pred_id"
  op: "Identity"
  input: "IsVariableInitialized"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/read/Switch"
  op: "RefSwitch"
  input: "global_step"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/read"
  op: "Identity"
  input: "cond/read/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Switch_1"
  op: "Switch"
  input: "global_step/Initializer/zeros"
  input: "cond/pred_id"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "cond/Merge"
  op: "Merge"
  input: "cond/Switch_1"
  input: "cond/read"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "add/y"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 0
      }
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "cond/Merge"
  input: "add/y"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "enqueue_input/fifo_queue"
  op: "FIFOQueueV2"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "capacity"
    value {
      i: 1000
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_INT64
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "shapes"
    value {
      list {
        shape {
        }
        shape {
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "enqueue_input/Placeholder"
  op: "Placeholder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "enqueue_input/Placeholder_1"
  op: "Placeholder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "enqueue_input/Placeholder_2"
  op: "Placeholder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "enqueue_input/Placeholder_3"
  op: "Placeholder"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "enqueue_input/fifo_queue_EnqueueMany"
  op: "QueueEnqueueManyV2"
  input: "enqueue_input/fifo_queue"
  input: "enqueue_input/Placeholder"
  input: "enqueue_input/Placeholder_1"
  input: "enqueue_input/Placeholder_2"
  input: "enqueue_input/Placeholder_3"
  device: "/device:CPU:0"
  attr {
    key: "Tcomponents"
    value {
      list {
        type: DT_INT64
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "enqueue_input/fifo_queue_Close"
  op: "QueueCloseV2"
  input: "enqueue_input/fifo_queue"
  device: "/device:CPU:0"
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: false
    }
  }
}
node {
  name: "enqueue_input/fifo_queue_Close_1"
  op: "QueueCloseV2"
  input: "enqueue_input/fifo_queue"
  device: "/device:CPU:0"
  attr {
    key: "cancel_pending_enqueues"
    value {
      b: true
    }
  }
}
node {
  name: "enqueue_input/fifo_queue_Size"
  op: "QueueSizeV2"
  input: "enqueue_input/fifo_queue"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "enqueue_input/sub/y"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "enqueue_input/sub"
  op: "Sub"
  input: "enqueue_input/fifo_queue_Size"
  input: "enqueue_input/sub/y"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "enqueue_input/Maximum/x"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "enqueue_input/Maximum"
  op: "Maximum"
  input: "enqueue_input/Maximum/x"
  input: "enqueue_input/sub"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "enqueue_input/Cast"
  op: "Cast"
  input: "enqueue_input/Maximum"
  device: "/device:CPU:0"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "enqueue_input/mul/y"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "enqueue_input/mul"
  op: "Mul"
  input: "enqueue_input/Cast"
  input: "enqueue_input/mul/y"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "enqueue_input/queue/enqueue_input/fifo_queuefraction_over_0_of_1000_full/tags"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "enqueue_input/queue/enqueue_input/fifo_queuefraction_over_0_of_1000_full"
      }
    }
  }
}
node {
  name: "enqueue_input/queue/enqueue_input/fifo_queuefraction_over_0_of_1000_full"
  op: "ScalarSummary"
  input: "enqueue_input/queue/enqueue_input/fifo_queuefraction_over_0_of_1000_full/tags"
  input: "enqueue_input/mul"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fifo_queue_DequeueMany/n"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "fifo_queue_DequeueMany"
  op: "QueueDequeueManyV2"
  input: "enqueue_input/fifo_queue"
  input: "fifo_queue_DequeueMany/n"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "component_types"
    value {
      list {
        type: DT_INT64
        type: DT_INT32
        type: DT_INT32
        type: DT_INT32
      }
    }
  }
  attr {
    key: "timeout_ms"
    value {
      i: -1
    }
  }
}
node {
  name: "one_hot/on_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "one_hot/off_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "one_hot/depth"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "one_hot"
  op: "OneHot"
  input: "fifo_queue_DequeueMany:2"
  input: "one_hot/depth"
  input: "one_hot/on_value"
  input: "one_hot/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "one_hot_1/on_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "one_hot_1/off_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "one_hot_1/depth"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "one_hot_1"
  op: "OneHot"
  input: "fifo_queue_DequeueMany:1"
  input: "one_hot_1/depth"
  input: "one_hot_1/on_value"
  input: "one_hot_1/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/Rank"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/concat/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/concat/values_0"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/range"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/transpose"
  op: "Transpose"
  input: "one_hot"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_5"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_4"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_5"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_6"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_7"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/strided_slice"
  op: "StridedSlice"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/Shape"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/strided_slice/stack"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/Const"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/Const_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/zeros"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/concat"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/time"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArray"
  op: "TensorArrayV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArray_1"
  op: "TensorArrayV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Enter_2"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Enter_3"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_1"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Enter_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_2"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Enter_2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_3"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Enter_3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Less/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Less"
  op: "Less"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/LoopCond"
  op: "LoopCond"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_1"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_2"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_3"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity_1"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity_2"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity_3"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\016\000\000\000\034\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.37796446681022644
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.37796446681022644
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 14
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Const"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split/split_dim"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split"
  op: "Split"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split/split_dim"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split:2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity_2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/add/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/add"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/NextIteration"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_1"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_2"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/NextIteration_3"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Exit"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Exit_1"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Exit_2"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Exit_3"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/Rank"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/concat_1/values_0"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/range"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/transpose"
  op: "Transpose"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/ReverseV2/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/ReverseV2"
  op: "ReverseV2"
  input: "one_hot"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/Rank"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/concat/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/concat/values_0"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/range"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/transpose"
  op: "Transpose"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/ReverseV2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_5"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_4"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_5"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_6"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_7"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/strided_slice"
  op: "StridedSlice"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/Shape"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/strided_slice/stack"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/Const"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/Const_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/zeros"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/concat"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/time"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArray"
  op: "TensorArrayV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArray_1"
  op: "TensorArrayV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Enter_2"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Enter_3"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_1"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Enter_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_2"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Enter_2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_3"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Enter_3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Less/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Less"
  op: "Less"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/LoopCond"
  op: "LoopCond"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_1"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_2"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_3"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity_1"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity_2"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity_3"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\016\000\000\000\034\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.37796446681022644
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.37796446681022644
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 14
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Const"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split/split_dim"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split"
  op: "Split"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split/split_dim"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split:2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity_2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/add/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/add"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/NextIteration"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_1"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_2"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/NextIteration_3"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Exit"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Exit_1"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Exit_2"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Exit_3"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/Rank"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/concat_1/values_0"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/range"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/transpose"
  op: "Transpose"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/ReverseV2/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/ReverseV2"
  op: "ReverseV2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_0/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_0/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_0/ReverseV2"
  input: "encoder/stack_bidirectional_rnn/cell_0/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/Rank"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/concat/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/concat/values_0"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/range"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/transpose"
  op: "Transpose"
  input: "encoder/stack_bidirectional_rnn/cell_0/concat"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_5"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_4"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_5"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_6"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_7"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/strided_slice"
  op: "StridedSlice"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/Shape"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/strided_slice/stack"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/Const"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/Const_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/zeros"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/concat"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/time"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray"
  op: "TensorArrayV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray_1"
  op: "TensorArrayV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Enter_2"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Enter_3"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_1"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Enter_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_2"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Enter_2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_3"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Enter_3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Less/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Less"
  op: "Less"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/LoopCond"
  op: "LoopCond"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_1"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_2"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_3"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity_1"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity_2"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity_3"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\025\000\000\000\034\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3499270975589752
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3499270975589752
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Const"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split/split_dim"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split"
  op: "Split"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split/split_dim"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split:2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity_2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/add/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/add"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/NextIteration"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/NextIteration_1"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/NextIteration_2"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/NextIteration_3"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Exit"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Exit_1"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Exit_2"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Exit_3"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/Rank"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/concat_1/values_0"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/range"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/transpose"
  op: "Transpose"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/ReverseV2/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/ReverseV2"
  op: "ReverseV2"
  input: "encoder/stack_bidirectional_rnn/cell_0/concat"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/Rank"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/concat/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/concat/values_0"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/range"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/transpose"
  op: "Transpose"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/ReverseV2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_5"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_4"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_5"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_6"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_7"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/strided_slice"
  op: "StridedSlice"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/Shape"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/strided_slice/stack"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/Const"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/Const_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/zeros"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/concat"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/time"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray"
  op: "TensorArrayV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray_1"
  op: "TensorArrayV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Enter_2"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Enter_3"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_1"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Enter_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_2"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Enter_2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_3"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Enter_3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Less/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Less"
  op: "Less"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/LoopCond"
  op: "LoopCond"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_1"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_2"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_3"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity_1"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity_2"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity_3"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\025\000\000\000\034\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3499270975589752
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3499270975589752
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Const"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split/split_dim"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split"
  op: "Split"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split/split_dim"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split:2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity_2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/add/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/add"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/NextIteration"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/NextIteration_1"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/NextIteration_2"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/NextIteration_3"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Exit"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Exit_1"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Exit_2"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Exit_3"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/Rank"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/concat_1/values_0"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/range"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/transpose"
  op: "Transpose"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/ReverseV2/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/ReverseV2"
  op: "ReverseV2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_1/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_1/ReverseV2"
  input: "encoder/stack_bidirectional_rnn/cell_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/Rank"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/concat/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/concat/values_0"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/range"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/transpose"
  op: "Transpose"
  input: "encoder/stack_bidirectional_rnn/cell_1/concat"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_5"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_4"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_5"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_6"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_7"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/strided_slice"
  op: "StridedSlice"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/Shape"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/strided_slice/stack"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/Const"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/Const_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/zeros"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/concat"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/time"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray"
  op: "TensorArrayV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray_1"
  op: "TensorArrayV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Enter_2"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Enter_3"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_1"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Enter_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_2"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Enter_2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_3"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Enter_3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Less/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Less"
  op: "Less"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/LoopCond"
  op: "LoopCond"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_1"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_2"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_3"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity_1"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity_2"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity_3"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\025\000\000\000\034\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3499270975589752
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3499270975589752
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Const"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split/split_dim"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split"
  op: "Split"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split/split_dim"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split:2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity_2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/add/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/add"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/NextIteration"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/NextIteration_1"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/NextIteration_2"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/NextIteration_3"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Exit"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Exit_1"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Exit_2"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Exit_3"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/Rank"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/concat_1/values_0"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/range"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/transpose"
  op: "Transpose"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/ReverseV2/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/ReverseV2"
  op: "ReverseV2"
  input: "encoder/stack_bidirectional_rnn/cell_1/concat"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/Rank"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/concat/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/concat/values_0"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/range"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/transpose"
  op: "Transpose"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/ReverseV2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_5"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_4"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_5"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_6"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_7"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/strided_slice"
  op: "StridedSlice"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/Shape"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/strided_slice/stack"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/Const"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/Const_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/zeros"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/concat"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/time"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray"
  op: "TensorArrayV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray_1"
  op: "TensorArrayV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Enter_2"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Enter_3"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_1"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Enter_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_2"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Enter_2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_3"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Enter_3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Less/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Less"
  op: "Less"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/LoopCond"
  op: "LoopCond"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_1"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_2"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_3"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity_1"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity_2"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity_3"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\025\000\000\000\034\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3499270975589752
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3499270975589752
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Const"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split/split_dim"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split"
  op: "Split"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split/split_dim"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split:2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity_2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/add/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/add"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/NextIteration"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/NextIteration_1"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/NextIteration_2"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/NextIteration_3"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Exit"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Exit_1"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Exit_2"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Exit_3"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/Rank"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/concat_1/values_0"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/range"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/transpose"
  op: "Transpose"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/ReverseV2/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/ReverseV2"
  op: "ReverseV2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_2/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_2/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_2/ReverseV2"
  input: "encoder/stack_bidirectional_rnn/cell_2/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/Rank"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/concat/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/concat/values_0"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/range"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/transpose"
  op: "Transpose"
  input: "encoder/stack_bidirectional_rnn/cell_2/concat"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_5"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_4"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_5"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_6"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_7"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/strided_slice"
  op: "StridedSlice"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/Shape"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/strided_slice/stack"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/Const"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/Const_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/zeros"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/concat"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/time"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray"
  op: "TensorArrayV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray_1"
  op: "TensorArrayV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Enter_2"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Enter_3"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_1"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Enter_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_2"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Enter_2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_3"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Enter_3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Less/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Less"
  op: "Less"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/LoopCond"
  op: "LoopCond"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_1"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_2"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_3"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity_1"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity_2"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity_3"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\025\000\000\000\034\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3499270975589752
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3499270975589752
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Const"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split/split_dim"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split"
  op: "Split"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split/split_dim"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split:2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity_2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/add/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/add"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/NextIteration"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/NextIteration_1"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/NextIteration_2"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/NextIteration_3"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Exit"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Exit_1"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Exit_2"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Exit_3"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/Rank"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/concat_1/values_0"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/range"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/transpose"
  op: "Transpose"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/ReverseV2/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/ReverseV2"
  op: "ReverseV2"
  input: "encoder/stack_bidirectional_rnn/cell_2/concat"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/Rank"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/concat/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/concat/values_0"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/range"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/transpose"
  op: "Transpose"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/ReverseV2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_5"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_4"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_5"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_6"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_7"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/strided_slice"
  op: "StridedSlice"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/Shape"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/strided_slice/stack"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/Const"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/Const_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/zeros"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/concat"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/time"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray"
  op: "TensorArrayV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray_1"
  op: "TensorArrayV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Enter_2"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Enter_3"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_1"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Enter_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_2"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Enter_2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_3"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Enter_3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Less/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Less"
  op: "Less"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/LoopCond"
  op: "LoopCond"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_1"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_2"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_3"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity_1"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity_2"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity_3"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\025\000\000\000\034\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3499270975589752
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3499270975589752
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Const"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split/split_dim"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split"
  op: "Split"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split/split_dim"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split:2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity_2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/add/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/add"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/NextIteration"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/NextIteration_1"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/NextIteration_2"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/NextIteration_3"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Exit"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Exit_1"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Exit_2"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Exit_3"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/Rank"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/concat_1/values_0"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/range"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/transpose"
  op: "Transpose"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/ReverseV2/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/ReverseV2"
  op: "ReverseV2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_3/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_3/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_3/ReverseV2"
  input: "encoder/stack_bidirectional_rnn/cell_3/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/Rank"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/concat/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/concat/values_0"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/range"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/transpose"
  op: "Transpose"
  input: "encoder/stack_bidirectional_rnn/cell_3/concat"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_1"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_5"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_4"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_5"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/concat_1"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_6"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/Const_7"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/strided_slice"
  op: "StridedSlice"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/Shape"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/strided_slice/stack"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/strided_slice/stack_1"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/Const"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/Const_1"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/zeros"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/concat"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/time"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArray"
  op: "TensorArrayV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArray_1"
  op: "TensorArrayV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/Shape"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_1"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/strided_slice"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Enter_2"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Enter_3"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/BasicLSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_1"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Enter_1"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_2"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Enter_2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_3"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Enter_3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Less/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Less"
  op: "Less"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/LoopCond"
  op: "LoopCond"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_1"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_1"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_2"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_3"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity_1"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity_2"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity_3"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\025\000\000\000\034\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3499270975589752
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3499270975589752
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity_3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Const"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split/split_dim"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split"
  op: "Split"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split/split_dim"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split:2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity_2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/add/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/add"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/NextIteration"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/NextIteration_1"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/NextIteration_2"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/NextIteration_3"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Exit"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Exit_1"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Exit_2"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Exit_3"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayStack/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArraySizeV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/Rank"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/concat_1/values_0"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/range"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/transpose"
  op: "Transpose"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/ReverseV2/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/ReverseV2"
  op: "ReverseV2"
  input: "encoder/stack_bidirectional_rnn/cell_3/concat"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/Rank"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/concat/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/concat/values_0"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/range"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/transpose"
  op: "Transpose"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/ReverseV2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_1"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_5"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_4"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_5"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/concat_1"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_6"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/Const_7"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/strided_slice"
  op: "StridedSlice"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/Shape"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/strided_slice/stack"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/strided_slice/stack_1"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/Const"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/Const_1"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/zeros"
  op: "Fill"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/concat"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/time"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArray"
  op: "TensorArrayV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArray_1"
  op: "TensorArrayV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/Shape"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_1"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/strided_slice"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Enter_2"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Enter_3"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/BasicLSTMCellZeroState/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_1"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Enter_1"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_2"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Enter_2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_3"
  op: "Merge"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Enter_3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Less/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Less"
  op: "Less"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/LoopCond"
  op: "LoopCond"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_1"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_1"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_2"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_3"
  op: "Switch"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity_1"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity_2"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity_3"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\025\000\000\000\034\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3499270975589752
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3499270975589752
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/max"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Assign"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Assign"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/read"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat/axis"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity_3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul"
  op: "MatMul"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Const"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split/split_dim"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split"
  op: "Split"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split/split_dim"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split:2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity_2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
  op: "Tanh"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
  op: "Tanh"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
  op: "Mul"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/add/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/add"
  op: "Add"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/NextIteration"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/NextIteration_1"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/NextIteration_2"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/NextIteration_3"
  op: "NextIteration"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Exit"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Exit_1"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Exit_2"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Exit_3"
  op: "Exit"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayStack/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArraySizeV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 7
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\004\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/range"
  op: "Range"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/range/start"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/Rank"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/concat_1/values_0"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/range"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/transpose"
  op: "Transpose"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/ReverseV2/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/ReverseV2"
  op: "ReverseV2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_4/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "encoder/stack_bidirectional_rnn/cell_4/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_4/ReverseV2"
  input: "encoder/stack_bidirectional_rnn/cell_4/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "encoder/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/concat"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Exit_2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Exit_2"
  input: "encoder/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "encoder/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "encoder/concat_1"
  op: "ConcatV2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Exit_3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Exit_3"
  input: "encoder/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "decoder/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decoder/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/range"
  op: "Range"
  input: "decoder/range/start"
  input: "decoder/Rank"
  input: "decoder/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/concat/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/concat"
  op: "ConcatV2"
  input: "decoder/concat/values_0"
  input: "decoder/range"
  input: "decoder/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "decoder/transpose"
  op: "Transpose"
  input: "one_hot_1"
  input: "decoder/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/rnn/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/rnn/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/rnn/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/rnn/strided_slice"
  op: "StridedSlice"
  input: "decoder/rnn/Shape"
  input: "decoder/rnn/strided_slice/stack"
  input: "decoder/rnn/strided_slice/stack_1"
  input: "decoder/rnn/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/rnn/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decoder/rnn/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 14
      }
    }
  }
}
node {
  name: "decoder/rnn/concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/rnn/concat"
  op: "ConcatV2"
  input: "decoder/rnn/Const"
  input: "decoder/rnn/Const_1"
  input: "decoder/rnn/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/zeros/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/rnn/zeros"
  op: "Fill"
  input: "decoder/rnn/concat"
  input: "decoder/rnn/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/time"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/rnn/TensorArray"
  op: "TensorArrayV3"
  input: "decoder/rnn/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "decoder/rnn/dynamic_rnn/output_0"
    }
  }
}
node {
  name: "decoder/rnn/TensorArray_1"
  op: "TensorArrayV3"
  input: "decoder/rnn/strided_slice"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "decoder/rnn/dynamic_rnn/input_0"
    }
  }
}
node {
  name: "decoder/rnn/TensorArrayUnstack/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\005\000\000\000\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/rnn/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/rnn/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/rnn/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/rnn/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "decoder/rnn/TensorArrayUnstack/Shape"
  input: "decoder/rnn/TensorArrayUnstack/strided_slice/stack"
  input: "decoder/rnn/TensorArrayUnstack/strided_slice/stack_1"
  input: "decoder/rnn/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "decoder/rnn/TensorArrayUnstack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/rnn/TensorArrayUnstack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/rnn/TensorArrayUnstack/range"
  op: "Range"
  input: "decoder/rnn/TensorArrayUnstack/range/start"
  input: "decoder/rnn/TensorArrayUnstack/strided_slice"
  input: "decoder/rnn/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "decoder/rnn/TensorArray_1"
  input: "decoder/rnn/TensorArrayUnstack/range"
  input: "decoder/transpose"
  input: "decoder/rnn/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/Enter"
  op: "Enter"
  input: "decoder/rnn/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/rnn/while/Enter_1"
  op: "Enter"
  input: "decoder/rnn/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/rnn/while/Enter_2"
  op: "Enter"
  input: "encoder/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/rnn/while/Enter_3"
  op: "Enter"
  input: "encoder/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/rnn/while/Merge"
  op: "Merge"
  input: "decoder/rnn/while/Enter"
  input: "decoder/rnn/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/Merge_1"
  op: "Merge"
  input: "decoder/rnn/while/Enter_1"
  input: "decoder/rnn/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/Merge_2"
  op: "Merge"
  input: "decoder/rnn/while/Enter_2"
  input: "decoder/rnn/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/Merge_3"
  op: "Merge"
  input: "decoder/rnn/while/Enter_3"
  input: "decoder/rnn/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/Less/Enter"
  op: "Enter"
  input: "decoder/rnn/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/rnn/while/Less"
  op: "Less"
  input: "decoder/rnn/while/Merge"
  input: "decoder/rnn/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/LoopCond"
  op: "LoopCond"
  input: "decoder/rnn/while/Less"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/Switch"
  op: "Switch"
  input: "decoder/rnn/while/Merge"
  input: "decoder/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/Merge"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/Switch_1"
  op: "Switch"
  input: "decoder/rnn/while/Merge_1"
  input: "decoder/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/Merge_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/Switch_2"
  op: "Switch"
  input: "decoder/rnn/while/Merge_2"
  input: "decoder/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/Merge_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/Switch_3"
  op: "Switch"
  input: "decoder/rnn/while/Merge_3"
  input: "decoder/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/Merge_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/Identity"
  op: "Identity"
  input: "decoder/rnn/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/Identity_1"
  op: "Identity"
  input: "decoder/rnn/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/Identity_2"
  op: "Identity"
  input: "decoder/rnn/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/Identity_3"
  op: "Identity"
  input: "decoder/rnn/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "decoder/rnn/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/rnn/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "decoder/rnn/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/rnn/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "decoder/rnn/while/TensorArrayReadV3/Enter"
  input: "decoder/rnn/while/Identity"
  input: "decoder/rnn/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "decoder/rnn/lstm_cell/kernel/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\025\000\000\0008\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/rnn/lstm_cell/kernel/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.2791452705860138
      }
    }
  }
}
node {
  name: "decoder/rnn/lstm_cell/kernel/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.2791452705860138
      }
    }
  }
}
node {
  name: "decoder/rnn/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/rnn/lstm_cell/kernel/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/rnn/lstm_cell/kernel/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/rnn/lstm_cell/kernel/Initializer/random_uniform/max"
  input: "decoder/rnn/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/lstm_cell/kernel/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/rnn/lstm_cell/kernel/Initializer/random_uniform/RandomUniform"
  input: "decoder/rnn/lstm_cell/kernel/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/lstm_cell/kernel/Initializer/random_uniform"
  op: "Add"
  input: "decoder/rnn/lstm_cell/kernel/Initializer/random_uniform/mul"
  input: "decoder/rnn/lstm_cell/kernel/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/lstm_cell/kernel"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 56
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/rnn/lstm_cell/kernel/Assign"
  op: "Assign"
  input: "decoder/rnn/lstm_cell/kernel"
  input: "decoder/rnn/lstm_cell/kernel/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/rnn/lstm_cell/kernel/read"
  op: "Identity"
  input: "decoder/rnn/lstm_cell/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/lstm_cell/bias/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 56
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/rnn/lstm_cell/bias"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 56
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/rnn/lstm_cell/bias/Assign"
  op: "Assign"
  input: "decoder/rnn/lstm_cell/bias"
  input: "decoder/rnn/lstm_cell/bias/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/rnn/lstm_cell/bias/read"
  op: "Identity"
  input: "decoder/rnn/lstm_cell/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/rnn/lstm_cell/concat/axis"
  op: "Const"
  input: "^decoder/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/rnn/while/rnn/lstm_cell/concat"
  op: "ConcatV2"
  input: "decoder/rnn/while/TensorArrayReadV3"
  input: "decoder/rnn/while/Identity_3"
  input: "decoder/rnn/while/rnn/lstm_cell/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/rnn/lstm_cell/MatMul/Enter"
  op: "Enter"
  input: "decoder/rnn/lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/rnn/while/rnn/lstm_cell/MatMul"
  op: "MatMul"
  input: "decoder/rnn/while/rnn/lstm_cell/concat"
  input: "decoder/rnn/while/rnn/lstm_cell/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/rnn/while/rnn/lstm_cell/BiasAdd/Enter"
  op: "Enter"
  input: "decoder/rnn/lstm_cell/bias/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/rnn/while/rnn/lstm_cell/BiasAdd"
  op: "BiasAdd"
  input: "decoder/rnn/while/rnn/lstm_cell/MatMul"
  input: "decoder/rnn/while/rnn/lstm_cell/BiasAdd/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/rnn/while/rnn/lstm_cell/Const"
  op: "Const"
  input: "^decoder/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 4
      }
    }
  }
}
node {
  name: "decoder/rnn/while/rnn/lstm_cell/split/split_dim"
  op: "Const"
  input: "^decoder/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/rnn/while/rnn/lstm_cell/split"
  op: "Split"
  input: "decoder/rnn/while/rnn/lstm_cell/split/split_dim"
  input: "decoder/rnn/while/rnn/lstm_cell/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "num_split"
    value {
      i: 4
    }
  }
}
node {
  name: "decoder/rnn/while/rnn/lstm_cell/add/y"
  op: "Const"
  input: "^decoder/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/rnn/while/rnn/lstm_cell/add"
  op: "Add"
  input: "decoder/rnn/while/rnn/lstm_cell/split:2"
  input: "decoder/rnn/while/rnn/lstm_cell/add/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/rnn/lstm_cell/Sigmoid"
  op: "Sigmoid"
  input: "decoder/rnn/while/rnn/lstm_cell/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/rnn/lstm_cell/mul"
  op: "Mul"
  input: "decoder/rnn/while/rnn/lstm_cell/Sigmoid"
  input: "decoder/rnn/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/rnn/lstm_cell/Sigmoid_1"
  op: "Sigmoid"
  input: "decoder/rnn/while/rnn/lstm_cell/split"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/rnn/lstm_cell/Tanh"
  op: "Tanh"
  input: "decoder/rnn/while/rnn/lstm_cell/split:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/rnn/lstm_cell/mul_1"
  op: "Mul"
  input: "decoder/rnn/while/rnn/lstm_cell/Sigmoid_1"
  input: "decoder/rnn/while/rnn/lstm_cell/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/rnn/lstm_cell/add_1"
  op: "Add"
  input: "decoder/rnn/while/rnn/lstm_cell/mul"
  input: "decoder/rnn/while/rnn/lstm_cell/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/rnn/lstm_cell/Sigmoid_2"
  op: "Sigmoid"
  input: "decoder/rnn/while/rnn/lstm_cell/split:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/rnn/lstm_cell/Tanh_1"
  op: "Tanh"
  input: "decoder/rnn/while/rnn/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/rnn/lstm_cell/mul_2"
  op: "Mul"
  input: "decoder/rnn/while/rnn/lstm_cell/Sigmoid_2"
  input: "decoder/rnn/while/rnn/lstm_cell/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "decoder/rnn/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/rnn/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "decoder/rnn/while/Identity"
  input: "decoder/rnn/while/rnn/lstm_cell/mul_2"
  input: "decoder/rnn/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/rnn/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/add/y"
  op: "Const"
  input: "^decoder/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/rnn/while/add"
  op: "Add"
  input: "decoder/rnn/while/Identity"
  input: "decoder/rnn/while/add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/NextIteration"
  op: "NextIteration"
  input: "decoder/rnn/while/add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/NextIteration_1"
  op: "NextIteration"
  input: "decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/NextIteration_2"
  op: "NextIteration"
  input: "decoder/rnn/while/rnn/lstm_cell/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/NextIteration_3"
  op: "NextIteration"
  input: "decoder/rnn/while/rnn/lstm_cell/mul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/Exit"
  op: "Exit"
  input: "decoder/rnn/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/Exit_1"
  op: "Exit"
  input: "decoder/rnn/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/Exit_2"
  op: "Exit"
  input: "decoder/rnn/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/while/Exit_3"
  op: "Exit"
  input: "decoder/rnn/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "decoder/rnn/TensorArray"
  input: "decoder/rnn/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/TensorArrayStack/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/rnn/TensorArrayStack/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/rnn/TensorArrayStack/range"
  op: "Range"
  input: "decoder/rnn/TensorArrayStack/range/start"
  input: "decoder/rnn/TensorArrayStack/TensorArraySizeV3"
  input: "decoder/rnn/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "decoder/rnn/TensorArray"
  input: "decoder/rnn/TensorArrayStack/range"
  input: "decoder/rnn/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 14
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/Const_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\005\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/rnn/Const_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 14
      }
    }
  }
}
node {
  name: "decoder/rnn/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "decoder/rnn/range/start"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "decoder/rnn/range/delta"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/rnn/range"
  op: "Range"
  input: "decoder/rnn/range/start"
  input: "decoder/rnn/Rank"
  input: "decoder/rnn/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/rnn/concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "decoder/rnn/concat_1"
  op: "ConcatV2"
  input: "decoder/rnn/concat_1/values_0"
  input: "decoder/rnn/range"
  input: "decoder/rnn/concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "decoder/rnn/transpose"
  op: "Transpose"
  input: "decoder/rnn/TensorArrayStack/TensorArrayGatherV3"
  input: "decoder/rnn/concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\016\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.5345224738121033
      }
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5345224738121033
      }
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "fully_connected/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "fully_connected/weights/Initializer/random_uniform/max"
  input: "fully_connected/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "fully_connected/weights/Initializer/random_uniform/RandomUniform"
  input: "fully_connected/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "fully_connected/weights/Initializer/random_uniform"
  op: "Add"
  input: "fully_connected/weights/Initializer/random_uniform/mul"
  input: "fully_connected/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "fully_connected/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 14
        }
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/weights/Assign"
  op: "Assign"
  input: "fully_connected/weights"
  input: "fully_connected/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/weights/read"
  op: "Identity"
  input: "fully_connected/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "fully_connected/biases/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "fully_connected/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "fully_connected/biases/Assign"
  op: "Assign"
  input: "fully_connected/biases"
  input: "fully_connected/biases/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "fully_connected/biases/read"
  op: "Identity"
  input: "fully_connected/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "fully_connected/Tensordot/transpose/perm"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "fully_connected/Tensordot/transpose"
  op: "Transpose"
  input: "decoder/rnn/transpose"
  input: "fully_connected/Tensordot/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "fully_connected/Tensordot/Reshape/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\017\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "fully_connected/Tensordot/Reshape"
  op: "Reshape"
  input: "fully_connected/Tensordot/transpose"
  input: "fully_connected/Tensordot/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "fully_connected/Tensordot/transpose_1/perm"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "fully_connected/Tensordot/transpose_1"
  op: "Transpose"
  input: "fully_connected/weights/read"
  input: "fully_connected/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "fully_connected/Tensordot/Reshape_1/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\016\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "fully_connected/Tensordot/Reshape_1"
  op: "Reshape"
  input: "fully_connected/Tensordot/transpose_1"
  input: "fully_connected/Tensordot/Reshape_1/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "fully_connected/Tensordot/MatMul"
  op: "MatMul"
  input: "fully_connected/Tensordot/Reshape"
  input: "fully_connected/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "fully_connected/Tensordot/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\005\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "fully_connected/Tensordot"
  op: "Reshape"
  input: "fully_connected/Tensordot/MatMul"
  input: "fully_connected/Tensordot/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "fully_connected/BiasAdd"
  op: "BiasAdd"
  input: "fully_connected/Tensordot"
  input: "fully_connected/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "ArgMax/dimension"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "ArgMax"
  op: "ArgMax"
  input: "fully_connected/BiasAdd"
  input: "ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
  attr {
    key: "output_type"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "one_hot_2/on_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "one_hot_2/off_value"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "one_hot_2/depth"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 7
      }
    }
  }
}
node {
  name: "one_hot_2"
  op: "OneHot"
  input: "fifo_queue_DequeueMany:3"
  input: "one_hot_2/depth"
  input: "one_hot_2/on_value"
  input: "one_hot_2/off_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "TI"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: -1
    }
  }
}
node {
  name: "Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\005\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "Rank_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\005\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "Sub/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Sub"
  op: "Sub"
  input: "Rank_1"
  input: "Sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Slice/begin"
  op: "Pack"
  input: "Sub"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Slice/size"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Slice"
  op: "Slice"
  input: "Shape_1"
  input: "Slice/begin"
  input: "Slice/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "concat/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "concat/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat"
  op: "ConcatV2"
  input: "concat/values_0"
  input: "Slice"
  input: "concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Reshape"
  op: "Reshape"
  input: "fully_connected/BiasAdd"
  input: "concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "Rank_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "Shape_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\005\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "Sub_1/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Sub_1"
  op: "Sub"
  input: "Rank_2"
  input: "Sub_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Slice_1/begin"
  op: "Pack"
  input: "Sub_1"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Slice_1/size"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Slice_1"
  op: "Slice"
  input: "Shape_2"
  input: "Slice_1/begin"
  input: "Slice_1/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "concat_1/values_0"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "concat_1/axis"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_1"
  op: "ConcatV2"
  input: "concat_1/values_0"
  input: "Slice_1"
  input: "concat_1/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_1"
  op: "Reshape"
  input: "one_hot_2"
  input: "concat_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "SoftmaxCrossEntropyWithLogits"
  op: "SoftmaxCrossEntropyWithLogits"
  input: "Reshape"
  input: "Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
        }
        shape {
          dim {
            size: 15
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "Sub_2/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Sub_2"
  op: "Sub"
  input: "Rank"
  input: "Sub_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "Slice_2/begin"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Slice_2/size"
  op: "Pack"
  input: "Sub_2"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "Slice_2"
  op: "Slice"
  input: "Shape"
  input: "Slice_2/begin"
  input: "Slice_2/size"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "Reshape_2"
  op: "Reshape"
  input: "SoftmaxCrossEntropyWithLogits"
  input: "Slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "loss"
  op: "Mean"
  input: "Reshape_2"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/learning_rate/Initializer/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "train_op/learning_rate"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/learning_rate/Assign"
  op: "Assign"
  input: "train_op/learning_rate"
  input: "train_op/learning_rate/Initializer/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/learning_rate/read"
  op: "Identity"
  input: "train_op/learning_rate"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "train_op/gradients/Fill"
  op: "Fill"
  input: "train_op/gradients/Shape"
  input: "train_op/gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_1"
  op: "Enter"
  input: "train_op/gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge"
  op: "Merge"
  input: "train_op/gradients/f_count_1"
  input: "train_op/gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch"
  op: "Switch"
  input: "train_op/gradients/Merge"
  input: "decoder/rnn/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Add/y"
  op: "Const"
  input: "^decoder/rnn/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/Add"
  op: "Add"
  input: "train_op/gradients/Switch:1"
  input: "train_op/gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/Add"
  input: "^train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul/StackPushV2"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul/StackPushV2"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul/StackPushV2"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_2"
  op: "Exit"
  input: "train_op/gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_1"
  op: "Enter"
  input: "train_op/gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_1"
  op: "Merge"
  input: "train_op/gradients/b_count_1"
  input: "train_op/gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "train_op/gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "train_op/gradients/Merge_1"
  input: "train_op/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_2"
  op: "LoopCond"
  input: "train_op/gradients/GreaterEqual"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_1"
  op: "Switch"
  input: "train_op/gradients/Merge_1"
  input: "train_op/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Sub"
  op: "Sub"
  input: "train_op/gradients/Switch_1:1"
  input: "train_op/gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_1"
  op: "NextIteration"
  input: "train_op/gradients/Sub"
  input: "^train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_3"
  op: "Exit"
  input: "train_op/gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_4"
  op: "Enter"
  input: "train_op/gradients/f_count_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_2"
  op: "Merge"
  input: "train_op/gradients/f_count_4"
  input: "train_op/gradients/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_2"
  op: "Switch"
  input: "train_op/gradients/Merge_2"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Add_1/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/Add_1"
  op: "Add"
  input: "train_op/gradients/Switch_2:1"
  input: "train_op/gradients/Add_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_2"
  op: "NextIteration"
  input: "train_op/gradients/Add_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_5"
  op: "Exit"
  input: "train_op/gradients/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_5"
  op: "Enter"
  input: "train_op/gradients/f_count_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_3"
  op: "Merge"
  input: "train_op/gradients/b_count_5"
  input: "train_op/gradients/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual_1/Enter"
  op: "Enter"
  input: "train_op/gradients/b_count_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual_1"
  op: "GreaterEqual"
  input: "train_op/gradients/Merge_3"
  input: "train_op/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_6"
  op: "LoopCond"
  input: "train_op/gradients/GreaterEqual_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_3"
  op: "Switch"
  input: "train_op/gradients/Merge_3"
  input: "train_op/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Sub_1"
  op: "Sub"
  input: "train_op/gradients/Switch_3:1"
  input: "train_op/gradients/GreaterEqual_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_3"
  op: "NextIteration"
  input: "train_op/gradients/Sub_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_7"
  op: "Exit"
  input: "train_op/gradients/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_6"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_7"
  op: "Enter"
  input: "train_op/gradients/f_count_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_4"
  op: "Merge"
  input: "train_op/gradients/f_count_7"
  input: "train_op/gradients/NextIteration_4"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_4"
  op: "Switch"
  input: "train_op/gradients/Merge_4"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Add_2/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/Add_2"
  op: "Add"
  input: "train_op/gradients/Switch_4:1"
  input: "train_op/gradients/Add_2/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_4"
  op: "NextIteration"
  input: "train_op/gradients/Add_2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_8"
  op: "Exit"
  input: "train_op/gradients/Switch_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_8"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_9"
  op: "Enter"
  input: "train_op/gradients/f_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_5"
  op: "Merge"
  input: "train_op/gradients/b_count_9"
  input: "train_op/gradients/NextIteration_5"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual_2/Enter"
  op: "Enter"
  input: "train_op/gradients/b_count_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual_2"
  op: "GreaterEqual"
  input: "train_op/gradients/Merge_5"
  input: "train_op/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_10"
  op: "LoopCond"
  input: "train_op/gradients/GreaterEqual_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_5"
  op: "Switch"
  input: "train_op/gradients/Merge_5"
  input: "train_op/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Sub_2"
  op: "Sub"
  input: "train_op/gradients/Switch_5:1"
  input: "train_op/gradients/GreaterEqual_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_5"
  op: "NextIteration"
  input: "train_op/gradients/Sub_2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_11"
  op: "Exit"
  input: "train_op/gradients/Switch_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_9"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_10"
  op: "Enter"
  input: "train_op/gradients/f_count_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_6"
  op: "Merge"
  input: "train_op/gradients/f_count_10"
  input: "train_op/gradients/NextIteration_6"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_6"
  op: "Switch"
  input: "train_op/gradients/Merge_6"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Add_3/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/Add_3"
  op: "Add"
  input: "train_op/gradients/Switch_6:1"
  input: "train_op/gradients/Add_3/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_6"
  op: "NextIteration"
  input: "train_op/gradients/Add_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_11"
  op: "Exit"
  input: "train_op/gradients/Switch_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_12"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_13"
  op: "Enter"
  input: "train_op/gradients/f_count_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_7"
  op: "Merge"
  input: "train_op/gradients/b_count_13"
  input: "train_op/gradients/NextIteration_7"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual_3/Enter"
  op: "Enter"
  input: "train_op/gradients/b_count_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual_3"
  op: "GreaterEqual"
  input: "train_op/gradients/Merge_7"
  input: "train_op/gradients/GreaterEqual_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_14"
  op: "LoopCond"
  input: "train_op/gradients/GreaterEqual_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_7"
  op: "Switch"
  input: "train_op/gradients/Merge_7"
  input: "train_op/gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Sub_3"
  op: "Sub"
  input: "train_op/gradients/Switch_7:1"
  input: "train_op/gradients/GreaterEqual_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_7"
  op: "NextIteration"
  input: "train_op/gradients/Sub_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_15"
  op: "Exit"
  input: "train_op/gradients/Switch_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_12"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_13"
  op: "Enter"
  input: "train_op/gradients/f_count_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_8"
  op: "Merge"
  input: "train_op/gradients/f_count_13"
  input: "train_op/gradients/NextIteration_8"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_8"
  op: "Switch"
  input: "train_op/gradients/Merge_8"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Add_4/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/Add_4"
  op: "Add"
  input: "train_op/gradients/Switch_8:1"
  input: "train_op/gradients/Add_4/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_8"
  op: "NextIteration"
  input: "train_op/gradients/Add_4"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_14"
  op: "Exit"
  input: "train_op/gradients/Switch_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_16"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_17"
  op: "Enter"
  input: "train_op/gradients/f_count_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_9"
  op: "Merge"
  input: "train_op/gradients/b_count_17"
  input: "train_op/gradients/NextIteration_9"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual_4/Enter"
  op: "Enter"
  input: "train_op/gradients/b_count_16"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual_4"
  op: "GreaterEqual"
  input: "train_op/gradients/Merge_9"
  input: "train_op/gradients/GreaterEqual_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_18"
  op: "LoopCond"
  input: "train_op/gradients/GreaterEqual_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_9"
  op: "Switch"
  input: "train_op/gradients/Merge_9"
  input: "train_op/gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Sub_4"
  op: "Sub"
  input: "train_op/gradients/Switch_9:1"
  input: "train_op/gradients/GreaterEqual_4/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_9"
  op: "NextIteration"
  input: "train_op/gradients/Sub_4"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_19"
  op: "Exit"
  input: "train_op/gradients/Switch_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_15"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_16"
  op: "Enter"
  input: "train_op/gradients/f_count_15"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_10"
  op: "Merge"
  input: "train_op/gradients/f_count_16"
  input: "train_op/gradients/NextIteration_10"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_10"
  op: "Switch"
  input: "train_op/gradients/Merge_10"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Add_5/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/Add_5"
  op: "Add"
  input: "train_op/gradients/Switch_10:1"
  input: "train_op/gradients/Add_5/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_10"
  op: "NextIteration"
  input: "train_op/gradients/Add_5"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_17"
  op: "Exit"
  input: "train_op/gradients/Switch_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_20"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_21"
  op: "Enter"
  input: "train_op/gradients/f_count_17"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_11"
  op: "Merge"
  input: "train_op/gradients/b_count_21"
  input: "train_op/gradients/NextIteration_11"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual_5/Enter"
  op: "Enter"
  input: "train_op/gradients/b_count_20"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual_5"
  op: "GreaterEqual"
  input: "train_op/gradients/Merge_11"
  input: "train_op/gradients/GreaterEqual_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_22"
  op: "LoopCond"
  input: "train_op/gradients/GreaterEqual_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_11"
  op: "Switch"
  input: "train_op/gradients/Merge_11"
  input: "train_op/gradients/b_count_22"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Sub_5"
  op: "Sub"
  input: "train_op/gradients/Switch_11:1"
  input: "train_op/gradients/GreaterEqual_5/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_11"
  op: "NextIteration"
  input: "train_op/gradients/Sub_5"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_23"
  op: "Exit"
  input: "train_op/gradients/Switch_11"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_18"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_19"
  op: "Enter"
  input: "train_op/gradients/f_count_18"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_12"
  op: "Merge"
  input: "train_op/gradients/f_count_19"
  input: "train_op/gradients/NextIteration_12"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_12"
  op: "Switch"
  input: "train_op/gradients/Merge_12"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Add_6/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/Add_6"
  op: "Add"
  input: "train_op/gradients/Switch_12:1"
  input: "train_op/gradients/Add_6/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_12"
  op: "NextIteration"
  input: "train_op/gradients/Add_6"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_20"
  op: "Exit"
  input: "train_op/gradients/Switch_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_24"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_25"
  op: "Enter"
  input: "train_op/gradients/f_count_20"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_13"
  op: "Merge"
  input: "train_op/gradients/b_count_25"
  input: "train_op/gradients/NextIteration_13"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual_6/Enter"
  op: "Enter"
  input: "train_op/gradients/b_count_24"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual_6"
  op: "GreaterEqual"
  input: "train_op/gradients/Merge_13"
  input: "train_op/gradients/GreaterEqual_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_26"
  op: "LoopCond"
  input: "train_op/gradients/GreaterEqual_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_13"
  op: "Switch"
  input: "train_op/gradients/Merge_13"
  input: "train_op/gradients/b_count_26"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Sub_6"
  op: "Sub"
  input: "train_op/gradients/Switch_13:1"
  input: "train_op/gradients/GreaterEqual_6/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_13"
  op: "NextIteration"
  input: "train_op/gradients/Sub_6"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_27"
  op: "Exit"
  input: "train_op/gradients/Switch_13"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_21"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_22"
  op: "Enter"
  input: "train_op/gradients/f_count_21"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_14"
  op: "Merge"
  input: "train_op/gradients/f_count_22"
  input: "train_op/gradients/NextIteration_14"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_14"
  op: "Switch"
  input: "train_op/gradients/Merge_14"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Add_7/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/Add_7"
  op: "Add"
  input: "train_op/gradients/Switch_14:1"
  input: "train_op/gradients/Add_7/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_14"
  op: "NextIteration"
  input: "train_op/gradients/Add_7"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_23"
  op: "Exit"
  input: "train_op/gradients/Switch_14"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_28"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_29"
  op: "Enter"
  input: "train_op/gradients/f_count_23"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_15"
  op: "Merge"
  input: "train_op/gradients/b_count_29"
  input: "train_op/gradients/NextIteration_15"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual_7/Enter"
  op: "Enter"
  input: "train_op/gradients/b_count_28"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual_7"
  op: "GreaterEqual"
  input: "train_op/gradients/Merge_15"
  input: "train_op/gradients/GreaterEqual_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_30"
  op: "LoopCond"
  input: "train_op/gradients/GreaterEqual_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_15"
  op: "Switch"
  input: "train_op/gradients/Merge_15"
  input: "train_op/gradients/b_count_30"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Sub_7"
  op: "Sub"
  input: "train_op/gradients/Switch_15:1"
  input: "train_op/gradients/GreaterEqual_7/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_15"
  op: "NextIteration"
  input: "train_op/gradients/Sub_7"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_31"
  op: "Exit"
  input: "train_op/gradients/Switch_15"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_24"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_25"
  op: "Enter"
  input: "train_op/gradients/f_count_24"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_16"
  op: "Merge"
  input: "train_op/gradients/f_count_25"
  input: "train_op/gradients/NextIteration_16"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_16"
  op: "Switch"
  input: "train_op/gradients/Merge_16"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Add_8/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/Add_8"
  op: "Add"
  input: "train_op/gradients/Switch_16:1"
  input: "train_op/gradients/Add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_16"
  op: "NextIteration"
  input: "train_op/gradients/Add_8"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_26"
  op: "Exit"
  input: "train_op/gradients/Switch_16"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_32"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_33"
  op: "Enter"
  input: "train_op/gradients/f_count_26"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_17"
  op: "Merge"
  input: "train_op/gradients/b_count_33"
  input: "train_op/gradients/NextIteration_17"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual_8/Enter"
  op: "Enter"
  input: "train_op/gradients/b_count_32"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual_8"
  op: "GreaterEqual"
  input: "train_op/gradients/Merge_17"
  input: "train_op/gradients/GreaterEqual_8/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_34"
  op: "LoopCond"
  input: "train_op/gradients/GreaterEqual_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_17"
  op: "Switch"
  input: "train_op/gradients/Merge_17"
  input: "train_op/gradients/b_count_34"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Sub_8"
  op: "Sub"
  input: "train_op/gradients/Switch_17:1"
  input: "train_op/gradients/GreaterEqual_8/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_17"
  op: "NextIteration"
  input: "train_op/gradients/Sub_8"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_35"
  op: "Exit"
  input: "train_op/gradients/Switch_17"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_27"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_28"
  op: "Enter"
  input: "train_op/gradients/f_count_27"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_18"
  op: "Merge"
  input: "train_op/gradients/f_count_28"
  input: "train_op/gradients/NextIteration_18"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_18"
  op: "Switch"
  input: "train_op/gradients/Merge_18"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Add_9/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/Add_9"
  op: "Add"
  input: "train_op/gradients/Switch_18:1"
  input: "train_op/gradients/Add_9/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_18"
  op: "NextIteration"
  input: "train_op/gradients/Add_9"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_29"
  op: "Exit"
  input: "train_op/gradients/Switch_18"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_36"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_37"
  op: "Enter"
  input: "train_op/gradients/f_count_29"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_19"
  op: "Merge"
  input: "train_op/gradients/b_count_37"
  input: "train_op/gradients/NextIteration_19"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual_9/Enter"
  op: "Enter"
  input: "train_op/gradients/b_count_36"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual_9"
  op: "GreaterEqual"
  input: "train_op/gradients/Merge_19"
  input: "train_op/gradients/GreaterEqual_9/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_38"
  op: "LoopCond"
  input: "train_op/gradients/GreaterEqual_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_19"
  op: "Switch"
  input: "train_op/gradients/Merge_19"
  input: "train_op/gradients/b_count_38"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Sub_9"
  op: "Sub"
  input: "train_op/gradients/Switch_19:1"
  input: "train_op/gradients/GreaterEqual_9/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_19"
  op: "NextIteration"
  input: "train_op/gradients/Sub_9"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_39"
  op: "Exit"
  input: "train_op/gradients/Switch_19"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_30"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_31"
  op: "Enter"
  input: "train_op/gradients/f_count_30"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_20"
  op: "Merge"
  input: "train_op/gradients/f_count_31"
  input: "train_op/gradients/NextIteration_20"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_20"
  op: "Switch"
  input: "train_op/gradients/Merge_20"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Add_10/y"
  op: "Const"
  input: "^encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/Add_10"
  op: "Add"
  input: "train_op/gradients/Switch_20:1"
  input: "train_op/gradients/Add_10/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_20"
  op: "NextIteration"
  input: "train_op/gradients/Add_10"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/f_count_32"
  op: "Exit"
  input: "train_op/gradients/Switch_20"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_40"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_41"
  op: "Enter"
  input: "train_op/gradients/f_count_32"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/Merge_21"
  op: "Merge"
  input: "train_op/gradients/b_count_41"
  input: "train_op/gradients/NextIteration_21"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual_10/Enter"
  op: "Enter"
  input: "train_op/gradients/b_count_40"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/GreaterEqual_10"
  op: "GreaterEqual"
  input: "train_op/gradients/Merge_21"
  input: "train_op/gradients/GreaterEqual_10/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_42"
  op: "LoopCond"
  input: "train_op/gradients/GreaterEqual_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Switch_21"
  op: "Switch"
  input: "train_op/gradients/Merge_21"
  input: "train_op/gradients/b_count_42"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Sub_10"
  op: "Sub"
  input: "train_op/gradients/Switch_21:1"
  input: "train_op/gradients/GreaterEqual_10/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/NextIteration_21"
  op: "NextIteration"
  input: "train_op/gradients/Sub_10"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/b_count_43"
  op: "Exit"
  input: "train_op/gradients/Switch_21"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/loss_grad/Reshape/shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/loss_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/Fill"
  input: "train_op/gradients/loss_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/loss_grad/Tile/multiples"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/loss_grad/Tile"
  op: "Tile"
  input: "train_op/gradients/loss_grad/Reshape"
  input: "train_op/gradients/loss_grad/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/loss_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\005\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/loss_grad/Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/loss_grad/Const"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/loss_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/gradients/loss_grad/Prod"
  op: "Prod"
  input: "train_op/gradients/loss_grad/Shape"
  input: "train_op/gradients/loss_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/loss_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/loss_grad/Const_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/loss_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "train_op/gradients/loss_grad/Prod_1"
  op: "Prod"
  input: "train_op/gradients/loss_grad/Shape_1"
  input: "train_op/gradients/loss_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/loss_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/loss_grad/Maximum/y"
  op: "Const"
  input: "^add"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/loss_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/loss_grad/Maximum"
  op: "Maximum"
  input: "train_op/gradients/loss_grad/Prod_1"
  input: "train_op/gradients/loss_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/loss_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/loss_grad/floordiv"
  op: "FloorDiv"
  input: "train_op/gradients/loss_grad/Prod"
  input: "train_op/gradients/loss_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/loss_grad/Shape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/loss_grad/Cast"
  op: "Cast"
  input: "train_op/gradients/loss_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/loss_grad/truediv"
  op: "RealDiv"
  input: "train_op/gradients/loss_grad/Tile"
  input: "train_op/gradients/loss_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Reshape_2_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 15
      }
    }
  }
}
node {
  name: "train_op/gradients/Reshape_2_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/loss_grad/truediv"
  input: "train_op/gradients/Reshape_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_like"
  op: "ZerosLike"
  input: "SoftmaxCrossEntropyWithLogits:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/SoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/SoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  op: "ExpandDims"
  input: "train_op/gradients/Reshape_2_grad/Reshape"
  input: "train_op/gradients/SoftmaxCrossEntropyWithLogits_grad/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/SoftmaxCrossEntropyWithLogits_grad/mul"
  op: "Mul"
  input: "train_op/gradients/SoftmaxCrossEntropyWithLogits_grad/ExpandDims"
  input: "SoftmaxCrossEntropyWithLogits:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/Reshape_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\005\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/Reshape_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/SoftmaxCrossEntropyWithLogits_grad/mul"
  input: "train_op/gradients/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/Reshape_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^train_op/gradients/Reshape_grad/Reshape"
  input: "^train_op/gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/Reshape_grad/Reshape"
  input: "^train_op/gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/Reshape_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/fully_connected/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/fully_connected/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/fully_connected/Tensordot_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\017\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/fully_connected/Tensordot_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/fully_connected/BiasAdd_grad/tuple/control_dependency"
  input: "train_op/gradients/fully_connected/Tensordot_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/fully_connected/Tensordot/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train_op/gradients/fully_connected/Tensordot_grad/Reshape"
  input: "fully_connected/Tensordot/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/fully_connected/Tensordot/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "fully_connected/Tensordot/Reshape"
  input: "train_op/gradients/fully_connected/Tensordot_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/fully_connected/Tensordot/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^train_op/gradients/fully_connected/Tensordot/MatMul_grad/MatMul"
  input: "^train_op/gradients/fully_connected/Tensordot/MatMul_grad/MatMul_1"
}
node {
  name: "train_op/gradients/fully_connected/Tensordot/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/fully_connected/Tensordot/MatMul_grad/MatMul"
  input: "^train_op/gradients/fully_connected/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/fully_connected/Tensordot/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 15
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/fully_connected/Tensordot/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/fully_connected/Tensordot/MatMul_grad/MatMul_1"
  input: "^train_op/gradients/fully_connected/Tensordot/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/fully_connected/Tensordot/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/fully_connected/Tensordot/Reshape_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\005\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/fully_connected/Tensordot/Reshape_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/fully_connected/Tensordot/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/fully_connected/Tensordot/Reshape_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/fully_connected/Tensordot/Reshape_1_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\016\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/fully_connected/Tensordot/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/fully_connected/Tensordot/MatMul_grad/tuple/control_dependency_1"
  input: "train_op/gradients/fully_connected/Tensordot/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/fully_connected/Tensordot/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "fully_connected/Tensordot/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/fully_connected/Tensordot/transpose_grad/transpose"
  op: "Transpose"
  input: "train_op/gradients/fully_connected/Tensordot/Reshape_grad/Reshape"
  input: "train_op/gradients/fully_connected/Tensordot/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 5
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/fully_connected/Tensordot/transpose_1_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "fully_connected/Tensordot/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/fully_connected/Tensordot/transpose_1_grad/transpose"
  op: "Transpose"
  input: "train_op/gradients/fully_connected/Tensordot/Reshape_1_grad/Reshape"
  input: "train_op/gradients/fully_connected/Tensordot/transpose_1_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "decoder/rnn/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/transpose_grad/transpose"
  op: "Transpose"
  input: "train_op/gradients/fully_connected/Tensordot/transpose_grad/transpose"
  input: "train_op/gradients/decoder/rnn/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 5
          }
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "decoder/rnn/TensorArray"
  input: "decoder/rnn/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "decoder/rnn/while/Exit_1"
  input: "^train_op/gradients/decoder/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "train_op/gradients/decoder/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "decoder/rnn/TensorArrayStack/range"
  input: "train_op/gradients/decoder/rnn/transpose_grad/transpose"
  input: "train_op/gradients/decoder/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/decoder/rnn/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/zeros_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/decoder/rnn/while/Exit_1_grad/b_exit"
  input: "train_op/gradients/decoder/rnn/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/decoder/rnn/while/Exit_2_grad/b_exit"
  input: "train_op/gradients/decoder/rnn/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/decoder/rnn/while/Exit_3_grad/b_exit"
  input: "train_op/gradients/decoder/rnn/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/decoder/rnn/while/Switch_1_grad/b_switch"
  input: "train_op/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/decoder/rnn/while/Merge_1_grad/Switch"
}
node {
  name: "train_op/gradients/decoder/rnn/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/Merge_1_grad/Switch"
  input: "^train_op/gradients/decoder/rnn/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/Merge_1_grad/Switch:1"
  input: "^train_op/gradients/decoder/rnn/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/decoder/rnn/while/Switch_2_grad/b_switch"
  input: "train_op/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/decoder/rnn/while/Merge_2_grad/Switch"
}
node {
  name: "train_op/gradients/decoder/rnn/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/Merge_2_grad/Switch"
  input: "^train_op/gradients/decoder/rnn/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/Merge_2_grad/Switch:1"
  input: "^train_op/gradients/decoder/rnn/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/decoder/rnn/while/Switch_3_grad/b_switch"
  input: "train_op/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/decoder/rnn/while/Merge_3_grad/Switch"
}
node {
  name: "train_op/gradients/decoder/rnn/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/Merge_3_grad/Switch"
  input: "^train_op/gradients/decoder/rnn/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/Merge_3_grad/Switch:1"
  input: "^train_op/gradients/decoder/rnn/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/decoder/rnn/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/decoder/rnn/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/decoder/rnn/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "decoder/rnn/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/rnn/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train_op/gradients/decoder/rnn/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/rnn/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/rnn/lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "decoder/rnn/while/Identity"
  input: "^train_op/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul/StackPopV2"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
}
node {
  name: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/decoder/rnn/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/concat_grad/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/concat_grad/mod"
  op: "FloorMod"
  input: "encoder/concat/axis"
  input: "train_op/gradients/encoder/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/concat_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/concat_grad/Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train_op/gradients/encoder/concat_grad/mod"
  input: "train_op/gradients/encoder/concat_grad/Shape"
  input: "train_op/gradients/encoder/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/concat_grad/Slice"
  op: "Slice"
  input: "train_op/gradients/decoder/rnn/while/Enter_2_grad/Exit"
  input: "train_op/gradients/encoder/concat_grad/ConcatOffset"
  input: "train_op/gradients/encoder/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/concat_grad/Slice_1"
  op: "Slice"
  input: "train_op/gradients/decoder/rnn/while/Enter_2_grad/Exit"
  input: "train_op/gradients/encoder/concat_grad/ConcatOffset:1"
  input: "train_op/gradients/encoder/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^train_op/gradients/encoder/concat_grad/Slice"
  input: "^train_op/gradients/encoder/concat_grad/Slice_1"
}
node {
  name: "train_op/gradients/encoder/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/concat_grad/Slice"
  input: "^train_op/gradients/encoder/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/concat_grad/Slice_1"
  input: "^train_op/gradients/encoder/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/concat_1_grad/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/concat_1_grad/mod"
  op: "FloorMod"
  input: "encoder/concat_1/axis"
  input: "train_op/gradients/encoder/concat_1_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/concat_1_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/concat_1_grad/Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/concat_1_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train_op/gradients/encoder/concat_1_grad/mod"
  input: "train_op/gradients/encoder/concat_1_grad/Shape"
  input: "train_op/gradients/encoder/concat_1_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/concat_1_grad/Slice"
  op: "Slice"
  input: "train_op/gradients/decoder/rnn/while/Enter_3_grad/Exit"
  input: "train_op/gradients/encoder/concat_1_grad/ConcatOffset"
  input: "train_op/gradients/encoder/concat_1_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/concat_1_grad/Slice_1"
  op: "Slice"
  input: "train_op/gradients/decoder/rnn/while/Enter_3_grad/Exit"
  input: "train_op/gradients/encoder/concat_1_grad/ConcatOffset:1"
  input: "train_op/gradients/encoder/concat_1_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/concat_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^train_op/gradients/encoder/concat_1_grad/Slice"
  input: "^train_op/gradients/encoder/concat_1_grad/Slice_1"
}
node {
  name: "train_op/gradients/encoder/concat_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/concat_1_grad/Slice"
  input: "^train_op/gradients/encoder/concat_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/concat_1_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/concat_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/concat_1_grad/Slice_1"
  input: "^train_op/gradients/encoder/concat_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/concat_1_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_3"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN"
  op: "AddN"
  input: "train_op/gradients/decoder/rnn/while/Merge_3_grad/tuple/control_dependency_1"
  input: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/Shape"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/rnn/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/rnn/lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul/Enter"
  input: "decoder/rnn/while/rnn/lstm_cell/Tanh_1"
  input: "^train_op/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "train_op/gradients/AddN"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/Sum"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/rnn/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/rnn/lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul_1/Enter"
  input: "decoder/rnn/while/rnn/lstm_cell/Sigmoid_2"
  input: "^train_op/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/AddN"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul_1"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/Sum_1"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/Reshape_1"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/encoder/concat_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/encoder/concat_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/zeros_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/encoder/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/encoder/concat_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/zeros_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/decoder/rnn/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_1"
  op: "AddN"
  input: "train_op/gradients/decoder/rnn/while/Merge_2_grad/tuple/control_dependency_1"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/Shape"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/AddN_1"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/Sum"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/AddN_1"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/Sum_1"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/Reshape_1"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  input: "train_op/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  input: "train_op/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  input: "train_op/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  input: "train_op/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/Shape"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul/Enter"
  input: "decoder/rnn/while/Identity_2"
  input: "^train_op/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/tuple/control_dependency"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/Sum"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/rnn/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/rnn/lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul_1/Enter"
  input: "decoder/rnn/while/rnn/lstm_cell/Sigmoid"
  input: "^train_op/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul_1"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/Sum_1"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/Reshape_1"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/Shape"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/rnn/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/rnn/lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul/Enter"
  input: "decoder/rnn/while/rnn/lstm_cell/Tanh"
  input: "^train_op/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/Sum"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/rnn/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/rnn/lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul_1/Enter"
  input: "decoder/rnn/while/rnn/lstm_cell/Sigmoid_1"
  input: "^train_op/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul_1"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/Sum_1"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/Reshape_1"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
  input: "^train_op/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/b_sync"
  op: "ControlTrigger"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
  input: "^train_op/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
  input: "^train_op/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/b_sync"
  op: "ControlTrigger"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
  input: "^train_op/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/Shape"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/Sum"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/Sum_1"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/Reshape_1"
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/Reshape_1"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/Tanh_grad/TanhGrad"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/add_grad/tuple/control_dependency"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_2"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/AddN_2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/AddN_2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_3"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/AddN_3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/AddN_3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/split_grad/concat"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/split_grad/concat"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/rnn/lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
  input: "^train_op/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity_2"
  input: "^train_op/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
  input: "^train_op/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
  input: "^train_op/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
  input: "^train_op/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity_2"
  input: "^train_op/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
  input: "^train_op/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
  input: "^train_op/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "decoder/rnn/lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/rnn/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/while/rnn/lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "decoder/rnn/while/rnn/lstm_cell/concat"
  input: "^train_op/gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul_1"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 56
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/mod/Const"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/mod"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/Shape"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/ConcatOffset"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/ConcatOffset:1"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/Slice_1"
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/Slice_1"
  input: "^train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/decoder/rnn/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_grad/TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_grad/TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/decoder/rnn/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
  input: "^train_op/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
  input: "^train_op/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/mod/Const"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/mod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/ConcatOffset:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/mod/Const"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/mod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/ConcatOffset:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Identity"
  input: "^train_op/gradients/Add_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_1"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Identity"
  input: "^train_op/gradients/Add_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_2"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "train_op/gradients/b_count_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "train_op/gradients/b_count_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/ReverseV2_grad/ReverseV2"
  op: "ReverseV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/transpose_grad/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_4"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/transpose_grad/transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/ReverseV2_grad/ReverseV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/transpose_grad/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/mod"
  op: "FloorMod"
  input: "encoder/stack_bidirectional_rnn/cell_3/concat/axis"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\004\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\004\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/mod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/Slice"
  op: "Slice"
  input: "train_op/gradients/AddN_4"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/Slice_1"
  op: "Slice"
  input: "train_op/gradients/AddN_4"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/ConcatOffset:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/Slice_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/Slice_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/ReverseV2_grad/ReverseV2"
  op: "ReverseV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/concat_grad/tuple/control_dependency_1"
  input: "encoder/stack_bidirectional_rnn/cell_3/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Exit_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/ReverseV2_grad/ReverseV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Exit_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_4"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_5"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/zeros_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/zeros_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/zeros_6"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_7"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Exit_1_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/zeros_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/zeros_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
  input: "train_op/gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  input: "train_op/gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  input: "train_op/gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Exit_1_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
  input: "train_op/gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  input: "train_op/gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  input: "train_op/gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity"
  input: "^train_op/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_5"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
  input: "^train_op/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "train_op/gradients/AddN_5"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
  input: "^train_op/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity"
  input: "^train_op/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_6"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
  input: "^train_op/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "train_op/gradients/AddN_6"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
  input: "^train_op/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_7"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/AddN_7"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/AddN_7"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
  input: "^train_op/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Identity_2"
  input: "^train_op/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
  input: "^train_op/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
  input: "^train_op/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_8"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/AddN_8"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/AddN_8"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
  input: "^train_op/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Identity_2"
  input: "^train_op/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
  input: "^train_op/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
  input: "^train_op/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_grad/TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_grad/TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
  input: "^train_op/gradients/Add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/mod/Const"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/mod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/ConcatOffset:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
  input: "^train_op/gradients/Add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^train_op/gradients/Sub_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/mod/Const"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/mod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/ConcatOffset:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "train_op/gradients/b_count_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^train_op/gradients/Sub_4"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "train_op/gradients/b_count_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/ReverseV2_grad/ReverseV2"
  op: "ReverseV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/transpose_grad/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_9"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/transpose_grad/transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/ReverseV2_grad/ReverseV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/transpose_grad/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/mod"
  op: "FloorMod"
  input: "encoder/stack_bidirectional_rnn/cell_2/concat/axis"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\004\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\004\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/mod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/Slice"
  op: "Slice"
  input: "train_op/gradients/AddN_9"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/Slice_1"
  op: "Slice"
  input: "train_op/gradients/AddN_9"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/ConcatOffset:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/Slice_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/Slice_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/ReverseV2_grad/ReverseV2"
  op: "ReverseV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/concat_grad/tuple/control_dependency_1"
  input: "encoder/stack_bidirectional_rnn/cell_2/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Exit_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/ReverseV2_grad/ReverseV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Exit_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_8"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_9"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/zeros_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/zeros_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/zeros_10"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_11"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Exit_1_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/zeros_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/zeros_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
  input: "train_op/gradients/b_count_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  input: "train_op/gradients/b_count_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  input: "train_op/gradients/b_count_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Exit_1_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
  input: "train_op/gradients/b_count_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  input: "train_op/gradients/b_count_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  input: "train_op/gradients/b_count_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity"
  input: "^train_op/gradients/Add_5"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_10"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
  input: "^train_op/gradients/Add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "train_op/gradients/AddN_10"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
  input: "^train_op/gradients/Add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/AddN_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity"
  input: "^train_op/gradients/Add_6"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_11"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
  input: "^train_op/gradients/Add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "train_op/gradients/AddN_11"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
  input: "^train_op/gradients/Add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/AddN_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_12"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/AddN_12"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/AddN_12"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
  input: "^train_op/gradients/Add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Identity_2"
  input: "^train_op/gradients/Add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
  input: "^train_op/gradients/Add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
  input: "^train_op/gradients/Add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_13"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/AddN_13"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/AddN_13"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
  input: "^train_op/gradients/Add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Identity_2"
  input: "^train_op/gradients/Add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
  input: "^train_op/gradients/Add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
  input: "^train_op/gradients/Add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_grad/TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_grad/TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
  input: "^train_op/gradients/Add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/mod/Const"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/mod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/ConcatOffset:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
  input: "^train_op/gradients/Add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^train_op/gradients/Sub_5"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/mod/Const"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/mod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/ConcatOffset:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "train_op/gradients/b_count_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^train_op/gradients/Sub_6"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "train_op/gradients/b_count_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/ReverseV2_grad/ReverseV2"
  op: "ReverseV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/transpose_grad/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_14"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/transpose_grad/transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/ReverseV2_grad/ReverseV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/transpose_grad/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/mod"
  op: "FloorMod"
  input: "encoder/stack_bidirectional_rnn/cell_1/concat/axis"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\004\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\004\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/mod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/Slice"
  op: "Slice"
  input: "train_op/gradients/AddN_14"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/Slice_1"
  op: "Slice"
  input: "train_op/gradients/AddN_14"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/ConcatOffset:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/Slice_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/Slice_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/ReverseV2_grad/ReverseV2"
  op: "ReverseV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/concat_grad/tuple/control_dependency_1"
  input: "encoder/stack_bidirectional_rnn/cell_1/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Exit_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/ReverseV2_grad/ReverseV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Exit_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_12"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_13"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/zeros_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/zeros_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/zeros_14"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_15"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Exit_1_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/zeros_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/zeros_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
  input: "train_op/gradients/b_count_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  input: "train_op/gradients/b_count_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  input: "train_op/gradients/b_count_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Exit_1_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
  input: "train_op/gradients/b_count_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  input: "train_op/gradients/b_count_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  input: "train_op/gradients/b_count_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity"
  input: "^train_op/gradients/Add_7"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_15"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
  input: "^train_op/gradients/Add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "train_op/gradients/AddN_15"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
  input: "^train_op/gradients/Add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/AddN_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity"
  input: "^train_op/gradients/Add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_16"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
  input: "^train_op/gradients/Add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "train_op/gradients/AddN_16"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
  input: "^train_op/gradients/Add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/AddN_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_17"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/AddN_17"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/AddN_17"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
  input: "^train_op/gradients/Add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Identity_2"
  input: "^train_op/gradients/Add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
  input: "^train_op/gradients/Add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
  input: "^train_op/gradients/Add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_18"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/AddN_18"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/AddN_18"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
  input: "^train_op/gradients/Add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Identity_2"
  input: "^train_op/gradients/Add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
  input: "^train_op/gradients/Add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
  input: "^train_op/gradients/Add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_grad/TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_grad/TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
  input: "^train_op/gradients/Add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/mod/Const"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/mod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/ConcatOffset:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
  input: "^train_op/gradients/Add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 21
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^train_op/gradients/Sub_7"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/mod/Const"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\016\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/mod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/ConcatOffset:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "train_op/gradients/b_count_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^train_op/gradients/Sub_8"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/range"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "train_op/gradients/b_count_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArray_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/range"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/concat"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/ReverseV2_grad/ReverseV2"
  op: "ReverseV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/transpose_grad/transpose"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_19"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/transpose_grad/transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/ReverseV2_grad/ReverseV2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/transpose_grad/transpose"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/Rank"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/mod"
  op: "FloorMod"
  input: "encoder/stack_bidirectional_rnn/cell_0/concat/axis"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/Shape"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\004\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/Shape_1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\003\000\000\000\004\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/mod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/Slice"
  op: "Slice"
  input: "train_op/gradients/AddN_19"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/Slice_1"
  op: "Slice"
  input: "train_op/gradients/AddN_19"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/ConcatOffset:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^add"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/Slice_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/Slice_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  op: "Transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/ReverseV2_grad/ReverseV2"
  op: "ReverseV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/concat_grad/tuple/control_dependency_1"
  input: "encoder/stack_bidirectional_rnn/cell_0/ReverseV2/axis"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 4
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Exit_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/range"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/transpose_grad/transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/concat_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  op: "Transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/ReverseV2_grad/ReverseV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 4
          }
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArray"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Exit_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArray"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/range"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/transpose_grad/transpose"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_16"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_17"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/zeros_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/zeros_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/zeros_18"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/zeros_19"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Exit_1_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Exit_2_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Exit_3_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArrayStack/TensorArrayGatherV3_grad/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/zeros_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "train_op/gradients/zeros_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
  input: "train_op/gradients/b_count_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_1_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
  input: "train_op/gradients/b_count_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
  input: "train_op/gradients/b_count_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Exit_1_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Exit_2_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Exit_3_grad/b_exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
  input: "train_op/gradients/b_count_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_1_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
  input: "train_op/gradients/b_count_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
  input: "train_op/gradients/b_count_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/Switch:1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity"
  input: "^train_op/gradients/Add_9"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_20"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2"
  input: "^train_op/gradients/Add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "train_op/gradients/AddN_20"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1"
  input: "^train_op/gradients/Add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/AddN_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
        }
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "train_op/gradients"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity"
  input: "^train_op/gradients/Add_10"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_1_grad/tuple/control_dependency_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_1_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_21"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_3_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2"
  input: "^train_op/gradients/Add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul"
  op: "Mul"
  input: "train_op/gradients/AddN_21"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1"
  input: "^train_op/gradients/Add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/AddN_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_22"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/AddN_22"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/AddN_22"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_2_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/TensorArrayWrite/TensorArrayWriteV3_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid"
  input: "^train_op/gradients/Add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Identity_2"
  input: "^train_op/gradients/Add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh"
  input: "^train_op/gradients/Add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1"
  input: "^train_op/gradients/Add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/AddN_23"
  op: "AddN"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Merge_2_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_2_grad/b_switch"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/AddN_23"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/AddN_23"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid"
  input: "^train_op/gradients/Add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity_2"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Identity_2"
  input: "^train_op/gradients/Add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh"
  input: "^train_op/gradients/Add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1"
  input: "^train_op/gradients/Add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1"
  op: "Mul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  op: "SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/mul/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_1_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Tanh_grad/TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/add_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/mul_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Sum"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Sum_1"
  op: "Sum"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape_1"
  op: "Reshape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Sum_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/Reshape_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat/Const"
  op: "Const"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
  op: "ConcatV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_1_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Tanh_grad/TanhGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/add_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/Sigmoid_2_grad/SigmoidGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat/Const"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat"
  input: "^train_op/gradients/Add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/split_grad/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/BiasAddGrad"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/mod/Const"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_9"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/mod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/ConcatOffset:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/read"
  input: "^add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul"
  op: "MatMul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  op: "StackV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc/max_size"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPushV2"
  op: "StackPushV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/Enter"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat"
  input: "^train_op/gradients/Add_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  op: "StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2/Enter"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1/StackPopV2"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 14
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/MatMul_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Rank"
  op: "Const"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/mod/Const"
  op: "Const"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/mod"
  op: "FloorMod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/mod/Const"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape"
  op: "Const"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape_1"
  op: "Const"
  input: "^train_op/gradients/Sub_10"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\007\000\000\000"
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/mod"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 2
          }
        }
        shape {
          dim {
            size: 2
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice"
  op: "Slice"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/ConcatOffset"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice_1"
  op: "Slice"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/ConcatOffset:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Shape_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/group_deps"
  op: "NoOp"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice_1"
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/control_dependency"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  op: "Identity"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice_1"
  input: "^train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/group_deps"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/Slice_1"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/while_context"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_2"
  input: "train_op/gradients/b_count_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Add"
  op: "Add"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Switch:1"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/concat_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 3
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/loss/tags"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "train_op/loss"
      }
    }
  }
}
node {
  name: "train_op/loss"
  op: "ScalarSummary"
  input: "train_op/loss/tags"
  input: "loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/beta1_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "train_op/beta1_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/beta1_power/Assign"
  op: "Assign"
  input: "train_op/beta1_power"
  input: "train_op/beta1_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/beta1_power/read"
  op: "Identity"
  input: "train_op/beta1_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/beta2_power/initial_value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "train_op/beta2_power"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/beta2_power/Assign"
  op: "Assign"
  input: "train_op/beta2_power"
  input: "train_op/beta2_power/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/beta2_power/read"
  op: "Identity"
  input: "train_op/beta2_power"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 14
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 14
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 14
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 14
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 28
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 28
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
}
node {
  name: "train_op/decoder/rnn/lstm_cell/kernel/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/decoder/rnn/lstm_cell/kernel/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 56
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/decoder/rnn/lstm_cell/kernel/Adam/Assign"
  op: "Assign"
  input: "train_op/decoder/rnn/lstm_cell/kernel/Adam"
  input: "train_op/decoder/rnn/lstm_cell/kernel/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/decoder/rnn/lstm_cell/kernel/Adam/read"
  op: "Identity"
  input: "train_op/decoder/rnn/lstm_cell/kernel/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "train_op/decoder/rnn/lstm_cell/kernel/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/decoder/rnn/lstm_cell/kernel/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 21
        }
        dim {
          size: 56
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/decoder/rnn/lstm_cell/kernel/Adam_1/Assign"
  op: "Assign"
  input: "train_op/decoder/rnn/lstm_cell/kernel/Adam_1"
  input: "train_op/decoder/rnn/lstm_cell/kernel/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/decoder/rnn/lstm_cell/kernel/Adam_1/read"
  op: "Identity"
  input: "train_op/decoder/rnn/lstm_cell/kernel/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "train_op/decoder/rnn/lstm_cell/bias/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 56
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/decoder/rnn/lstm_cell/bias/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 56
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/decoder/rnn/lstm_cell/bias/Adam/Assign"
  op: "Assign"
  input: "train_op/decoder/rnn/lstm_cell/bias/Adam"
  input: "train_op/decoder/rnn/lstm_cell/bias/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/decoder/rnn/lstm_cell/bias/Adam/read"
  op: "Identity"
  input: "train_op/decoder/rnn/lstm_cell/bias/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "train_op/decoder/rnn/lstm_cell/bias/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 56
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/decoder/rnn/lstm_cell/bias/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 56
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/decoder/rnn/lstm_cell/bias/Adam_1/Assign"
  op: "Assign"
  input: "train_op/decoder/rnn/lstm_cell/bias/Adam_1"
  input: "train_op/decoder/rnn/lstm_cell/bias/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/decoder/rnn/lstm_cell/bias/Adam_1/read"
  op: "Identity"
  input: "train_op/decoder/rnn/lstm_cell/bias/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
}
node {
  name: "train_op/fully_connected/weights/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/fully_connected/weights/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 14
        }
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/fully_connected/weights/Adam/Assign"
  op: "Assign"
  input: "train_op/fully_connected/weights/Adam"
  input: "train_op/fully_connected/weights/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/fully_connected/weights/Adam/read"
  op: "Identity"
  input: "train_op/fully_connected/weights/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/fully_connected/weights/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/fully_connected/weights/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 14
        }
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/fully_connected/weights/Adam_1/Assign"
  op: "Assign"
  input: "train_op/fully_connected/weights/Adam_1"
  input: "train_op/fully_connected/weights/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/fully_connected/weights/Adam_1/read"
  op: "Identity"
  input: "train_op/fully_connected/weights/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/fully_connected/biases/Adam/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/fully_connected/biases/Adam"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/fully_connected/biases/Adam/Assign"
  op: "Assign"
  input: "train_op/fully_connected/biases/Adam"
  input: "train_op/fully_connected/biases/Adam/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/fully_connected/biases/Adam/read"
  op: "Identity"
  input: "train_op/fully_connected/biases/Adam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/fully_connected/biases/Adam_1/Initializer/zeros"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 7
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "train_op/fully_connected/biases/Adam_1"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 7
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "train_op/fully_connected/biases/Adam_1/Assign"
  op: "Assign"
  input: "train_op/fully_connected/biases/Adam_1"
  input: "train_op/fully_connected/biases/Adam_1/Initializer/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/fully_connected/biases/Adam_1/read"
  op: "Identity"
  input: "train_op/fully_connected/biases/Adam_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
}
node {
  name: "train_op/train/beta1"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "train_op/train/beta2"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.9990000128746033
      }
    }
  }
}
node {
  name: "train_op/train/epsilon"
  op: "Const"
  input: "^add"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "train_op/train/update_encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/fw/while/fw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/bw/while/bw/basic_lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_decoder/rnn/lstm_cell/kernel/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/rnn/lstm_cell/kernel"
  input: "train_op/decoder/rnn/lstm_cell/kernel/Adam"
  input: "train_op/decoder/rnn/lstm_cell/kernel/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_decoder/rnn/lstm_cell/bias/ApplyAdam"
  op: "ApplyAdam"
  input: "decoder/rnn/lstm_cell/bias"
  input: "train_op/decoder/rnn/lstm_cell/bias/Adam"
  input: "train_op/decoder/rnn/lstm_cell/bias/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/decoder/rnn/while/rnn/lstm_cell/BiasAdd/Enter_grad/b_acc_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_fully_connected/weights/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/weights"
  input: "train_op/fully_connected/weights/Adam"
  input: "train_op/fully_connected/weights/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/fully_connected/Tensordot/transpose_1_grad/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/update_fully_connected/biases/ApplyAdam"
  op: "ApplyAdam"
  input: "fully_connected/biases"
  input: "train_op/fully_connected/biases/Adam"
  input: "train_op/fully_connected/biases/Adam_1"
  input: "train_op/beta1_power/read"
  input: "train_op/beta2_power/read"
  input: "train_op/learning_rate/read"
  input: "train_op/train/beta1"
  input: "train_op/train/beta2"
  input: "train_op/train/epsilon"
  input: "train_op/gradients/fully_connected/BiasAdd_grad/tuple/control_dependency_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "use_nesterov"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/train/mul"
  op: "Mul"
  input: "train_op/beta1_power/read"
  input: "train_op/train/beta1"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_decoder/rnn/lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_decoder/rnn/lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_fully_connected/weights/ApplyAdam"
  input: "^train_op/train/update_fully_connected/biases/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/train/Assign"
  op: "Assign"
  input: "train_op/beta1_power"
  input: "train_op/train/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/train/mul_1"
  op: "Mul"
  input: "train_op/beta2_power/read"
  input: "train_op/train/beta2"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_decoder/rnn/lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_decoder/rnn/lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_fully_connected/weights/ApplyAdam"
  input: "^train_op/train/update_fully_connected/biases/ApplyAdam"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "train_op/train/Assign_1"
  op: "Assign"
  input: "train_op/beta2_power"
  input: "train_op/train/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "train_op/train/update"
  op: "NoOp"
  input: "^add"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_decoder/rnn/lstm_cell/kernel/ApplyAdam"
  input: "^train_op/train/update_decoder/rnn/lstm_cell/bias/ApplyAdam"
  input: "^train_op/train/update_fully_connected/weights/ApplyAdam"
  input: "^train_op/train/update_fully_connected/biases/ApplyAdam"
  input: "^train_op/train/Assign"
  input: "^train_op/train/Assign_1"
}
node {
  name: "train_op/train/value"
  op: "Const"
  input: "^add"
  input: "^train_op/train/update"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT64
        tensor_shape {
        }
        int64_val: 1
      }
    }
  }
}
node {
  name: "train_op/train"
  op: "AssignAdd"
  input: "global_step"
  input: "train_op/train/value"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
}
node {
  name: "train_op/control_dependency"
  op: "Identity"
  input: "loss"
  input: "^train_op/train"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@loss"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "loss_1/tags"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "loss_1"
      }
    }
  }
}
node {
  name: "loss_1"
  op: "ScalarSummary"
  input: "loss_1/tags"
  input: "loss"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^global_step/Assign"
  input: "^encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Assign"
  input: "^encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Assign"
  input: "^encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Assign"
  input: "^encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Assign"
  input: "^encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Assign"
  input: "^encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Assign"
  input: "^encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Assign"
  input: "^encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Assign"
  input: "^encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Assign"
  input: "^encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Assign"
  input: "^encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Assign"
  input: "^encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Assign"
  input: "^encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Assign"
  input: "^encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Assign"
  input: "^encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Assign"
  input: "^encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Assign"
  input: "^encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Assign"
  input: "^encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Assign"
  input: "^encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Assign"
  input: "^encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Assign"
  input: "^decoder/rnn/lstm_cell/kernel/Assign"
  input: "^decoder/rnn/lstm_cell/bias/Assign"
  input: "^fully_connected/weights/Assign"
  input: "^fully_connected/biases/Assign"
  input: "^train_op/learning_rate/Assign"
  input: "^train_op/beta1_power/Assign"
  input: "^train_op/beta2_power/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam/Assign"
  input: "^train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1/Assign"
  input: "^train_op/decoder/rnn/lstm_cell/kernel/Adam/Assign"
  input: "^train_op/decoder/rnn/lstm_cell/kernel/Adam_1/Assign"
  input: "^train_op/decoder/rnn/lstm_cell/bias/Adam/Assign"
  input: "^train_op/decoder/rnn/lstm_cell/bias/Adam_1/Assign"
  input: "^train_op/fully_connected/weights/Adam/Assign"
  input: "^train_op/fully_connected/weights/Adam_1/Assign"
  input: "^train_op/fully_connected/biases/Adam/Assign"
  input: "^train_op/fully_connected/biases/Adam_1/Assign"
}
node {
  name: "init_1"
  op: "NoOp"
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^init"
  input: "^init_1"
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "decoder/rnn/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "decoder/rnn/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "fully_connected/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "fully_connected/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "train_op/learning_rate"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "train_op/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "train_op/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_61"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_62"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_63"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_64"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_65"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_66"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_67"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_68"
  op: "IsVariableInitialized"
  input: "train_op/decoder/rnn/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_69"
  op: "IsVariableInitialized"
  input: "train_op/decoder/rnn/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_70"
  op: "IsVariableInitialized"
  input: "train_op/decoder/rnn/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_71"
  op: "IsVariableInitialized"
  input: "train_op/decoder/rnn/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_72"
  op: "IsVariableInitialized"
  input: "train_op/fully_connected/weights/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_73"
  op: "IsVariableInitialized"
  input: "train_op/fully_connected/weights/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_74"
  op: "IsVariableInitialized"
  input: "train_op/fully_connected/biases/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/IsVariableInitialized_75"
  op: "IsVariableInitialized"
  input: "train_op/fully_connected/biases/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables/stack"
  op: "Pack"
  input: "report_uninitialized_variables/IsVariableInitialized"
  input: "report_uninitialized_variables/IsVariableInitialized_1"
  input: "report_uninitialized_variables/IsVariableInitialized_2"
  input: "report_uninitialized_variables/IsVariableInitialized_3"
  input: "report_uninitialized_variables/IsVariableInitialized_4"
  input: "report_uninitialized_variables/IsVariableInitialized_5"
  input: "report_uninitialized_variables/IsVariableInitialized_6"
  input: "report_uninitialized_variables/IsVariableInitialized_7"
  input: "report_uninitialized_variables/IsVariableInitialized_8"
  input: "report_uninitialized_variables/IsVariableInitialized_9"
  input: "report_uninitialized_variables/IsVariableInitialized_10"
  input: "report_uninitialized_variables/IsVariableInitialized_11"
  input: "report_uninitialized_variables/IsVariableInitialized_12"
  input: "report_uninitialized_variables/IsVariableInitialized_13"
  input: "report_uninitialized_variables/IsVariableInitialized_14"
  input: "report_uninitialized_variables/IsVariableInitialized_15"
  input: "report_uninitialized_variables/IsVariableInitialized_16"
  input: "report_uninitialized_variables/IsVariableInitialized_17"
  input: "report_uninitialized_variables/IsVariableInitialized_18"
  input: "report_uninitialized_variables/IsVariableInitialized_19"
  input: "report_uninitialized_variables/IsVariableInitialized_20"
  input: "report_uninitialized_variables/IsVariableInitialized_21"
  input: "report_uninitialized_variables/IsVariableInitialized_22"
  input: "report_uninitialized_variables/IsVariableInitialized_23"
  input: "report_uninitialized_variables/IsVariableInitialized_24"
  input: "report_uninitialized_variables/IsVariableInitialized_25"
  input: "report_uninitialized_variables/IsVariableInitialized_26"
  input: "report_uninitialized_variables/IsVariableInitialized_27"
  input: "report_uninitialized_variables/IsVariableInitialized_28"
  input: "report_uninitialized_variables/IsVariableInitialized_29"
  input: "report_uninitialized_variables/IsVariableInitialized_30"
  input: "report_uninitialized_variables/IsVariableInitialized_31"
  input: "report_uninitialized_variables/IsVariableInitialized_32"
  input: "report_uninitialized_variables/IsVariableInitialized_33"
  input: "report_uninitialized_variables/IsVariableInitialized_34"
  input: "report_uninitialized_variables/IsVariableInitialized_35"
  input: "report_uninitialized_variables/IsVariableInitialized_36"
  input: "report_uninitialized_variables/IsVariableInitialized_37"
  input: "report_uninitialized_variables/IsVariableInitialized_38"
  input: "report_uninitialized_variables/IsVariableInitialized_39"
  input: "report_uninitialized_variables/IsVariableInitialized_40"
  input: "report_uninitialized_variables/IsVariableInitialized_41"
  input: "report_uninitialized_variables/IsVariableInitialized_42"
  input: "report_uninitialized_variables/IsVariableInitialized_43"
  input: "report_uninitialized_variables/IsVariableInitialized_44"
  input: "report_uninitialized_variables/IsVariableInitialized_45"
  input: "report_uninitialized_variables/IsVariableInitialized_46"
  input: "report_uninitialized_variables/IsVariableInitialized_47"
  input: "report_uninitialized_variables/IsVariableInitialized_48"
  input: "report_uninitialized_variables/IsVariableInitialized_49"
  input: "report_uninitialized_variables/IsVariableInitialized_50"
  input: "report_uninitialized_variables/IsVariableInitialized_51"
  input: "report_uninitialized_variables/IsVariableInitialized_52"
  input: "report_uninitialized_variables/IsVariableInitialized_53"
  input: "report_uninitialized_variables/IsVariableInitialized_54"
  input: "report_uninitialized_variables/IsVariableInitialized_55"
  input: "report_uninitialized_variables/IsVariableInitialized_56"
  input: "report_uninitialized_variables/IsVariableInitialized_57"
  input: "report_uninitialized_variables/IsVariableInitialized_58"
  input: "report_uninitialized_variables/IsVariableInitialized_59"
  input: "report_uninitialized_variables/IsVariableInitialized_60"
  input: "report_uninitialized_variables/IsVariableInitialized_61"
  input: "report_uninitialized_variables/IsVariableInitialized_62"
  input: "report_uninitialized_variables/IsVariableInitialized_63"
  input: "report_uninitialized_variables/IsVariableInitialized_64"
  input: "report_uninitialized_variables/IsVariableInitialized_65"
  input: "report_uninitialized_variables/IsVariableInitialized_66"
  input: "report_uninitialized_variables/IsVariableInitialized_67"
  input: "report_uninitialized_variables/IsVariableInitialized_68"
  input: "report_uninitialized_variables/IsVariableInitialized_69"
  input: "report_uninitialized_variables/IsVariableInitialized_70"
  input: "report_uninitialized_variables/IsVariableInitialized_71"
  input: "report_uninitialized_variables/IsVariableInitialized_72"
  input: "report_uninitialized_variables/IsVariableInitialized_73"
  input: "report_uninitialized_variables/IsVariableInitialized_74"
  input: "report_uninitialized_variables/IsVariableInitialized_75"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 76
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 76
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 76
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 76
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 76
          }
        }
        string_val: "global_step"
        string_val: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
        string_val: "decoder/rnn/lstm_cell/kernel"
        string_val: "decoder/rnn/lstm_cell/bias"
        string_val: "fully_connected/weights"
        string_val: "fully_connected/biases"
        string_val: "train_op/learning_rate"
        string_val: "train_op/beta1_power"
        string_val: "train_op/beta2_power"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/decoder/rnn/lstm_cell/kernel/Adam"
        string_val: "train_op/decoder/rnn/lstm_cell/kernel/Adam_1"
        string_val: "train_op/decoder/rnn/lstm_cell/bias/Adam"
        string_val: "train_op/decoder/rnn/lstm_cell/bias/Adam_1"
        string_val: "train_op/fully_connected/weights/Adam"
        string_val: "train_op/fully_connected/weights/Adam_1"
        string_val: "train_op/fully_connected/biases/Adam"
        string_val: "train_op/fully_connected/biases/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 76
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables/boolean_mask/strided_slice"
  input: "report_uninitialized_variables/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 76
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables/boolean_mask/Shape_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/values_0"
  op: "Pack"
  input: "report_uninitialized_variables/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables/Const"
  input: "report_uninitialized_variables/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 76
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables/LogicalNot"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 76
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables/boolean_mask/Reshape"
  input: "report_uninitialized_variables/boolean_mask/Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "report_uninitialized_resources/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "concat_2/axis"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "concat_2"
  op: "ConcatV2"
  input: "report_uninitialized_variables/boolean_mask/Gather"
  input: "report_uninitialized_resources/Const"
  input: "concat_2/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized"
  op: "IsVariableInitialized"
  input: "global_step"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_1"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_2"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_3"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_4"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_5"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_6"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_7"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_8"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_9"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_10"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_11"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_12"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_13"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_14"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_15"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_16"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_17"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_18"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_19"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_20"
  op: "IsVariableInitialized"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_21"
  op: "IsVariableInitialized"
  input: "decoder/rnn/lstm_cell/kernel"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_22"
  op: "IsVariableInitialized"
  input: "decoder/rnn/lstm_cell/bias"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_23"
  op: "IsVariableInitialized"
  input: "fully_connected/weights"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_24"
  op: "IsVariableInitialized"
  input: "fully_connected/biases"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_25"
  op: "IsVariableInitialized"
  input: "train_op/learning_rate"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_26"
  op: "IsVariableInitialized"
  input: "train_op/beta1_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_27"
  op: "IsVariableInitialized"
  input: "train_op/beta2_power"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_28"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_29"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_30"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_31"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_32"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_33"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_34"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_35"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_36"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_37"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_38"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_39"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_40"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_41"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_42"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_43"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_44"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_45"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_46"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_47"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_48"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_49"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_50"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_51"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_52"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_53"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_54"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_55"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_56"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_57"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_58"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_59"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_60"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_61"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_62"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_63"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_64"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_65"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_66"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_67"
  op: "IsVariableInitialized"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_68"
  op: "IsVariableInitialized"
  input: "train_op/decoder/rnn/lstm_cell/kernel/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_69"
  op: "IsVariableInitialized"
  input: "train_op/decoder/rnn/lstm_cell/kernel/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_70"
  op: "IsVariableInitialized"
  input: "train_op/decoder/rnn/lstm_cell/bias/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_71"
  op: "IsVariableInitialized"
  input: "train_op/decoder/rnn/lstm_cell/bias/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_72"
  op: "IsVariableInitialized"
  input: "train_op/fully_connected/weights/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_73"
  op: "IsVariableInitialized"
  input: "train_op/fully_connected/weights/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_74"
  op: "IsVariableInitialized"
  input: "train_op/fully_connected/biases/Adam"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/IsVariableInitialized_75"
  op: "IsVariableInitialized"
  input: "train_op/fully_connected/biases/Adam_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "report_uninitialized_variables_1/stack"
  op: "Pack"
  input: "report_uninitialized_variables_1/IsVariableInitialized"
  input: "report_uninitialized_variables_1/IsVariableInitialized_1"
  input: "report_uninitialized_variables_1/IsVariableInitialized_2"
  input: "report_uninitialized_variables_1/IsVariableInitialized_3"
  input: "report_uninitialized_variables_1/IsVariableInitialized_4"
  input: "report_uninitialized_variables_1/IsVariableInitialized_5"
  input: "report_uninitialized_variables_1/IsVariableInitialized_6"
  input: "report_uninitialized_variables_1/IsVariableInitialized_7"
  input: "report_uninitialized_variables_1/IsVariableInitialized_8"
  input: "report_uninitialized_variables_1/IsVariableInitialized_9"
  input: "report_uninitialized_variables_1/IsVariableInitialized_10"
  input: "report_uninitialized_variables_1/IsVariableInitialized_11"
  input: "report_uninitialized_variables_1/IsVariableInitialized_12"
  input: "report_uninitialized_variables_1/IsVariableInitialized_13"
  input: "report_uninitialized_variables_1/IsVariableInitialized_14"
  input: "report_uninitialized_variables_1/IsVariableInitialized_15"
  input: "report_uninitialized_variables_1/IsVariableInitialized_16"
  input: "report_uninitialized_variables_1/IsVariableInitialized_17"
  input: "report_uninitialized_variables_1/IsVariableInitialized_18"
  input: "report_uninitialized_variables_1/IsVariableInitialized_19"
  input: "report_uninitialized_variables_1/IsVariableInitialized_20"
  input: "report_uninitialized_variables_1/IsVariableInitialized_21"
  input: "report_uninitialized_variables_1/IsVariableInitialized_22"
  input: "report_uninitialized_variables_1/IsVariableInitialized_23"
  input: "report_uninitialized_variables_1/IsVariableInitialized_24"
  input: "report_uninitialized_variables_1/IsVariableInitialized_25"
  input: "report_uninitialized_variables_1/IsVariableInitialized_26"
  input: "report_uninitialized_variables_1/IsVariableInitialized_27"
  input: "report_uninitialized_variables_1/IsVariableInitialized_28"
  input: "report_uninitialized_variables_1/IsVariableInitialized_29"
  input: "report_uninitialized_variables_1/IsVariableInitialized_30"
  input: "report_uninitialized_variables_1/IsVariableInitialized_31"
  input: "report_uninitialized_variables_1/IsVariableInitialized_32"
  input: "report_uninitialized_variables_1/IsVariableInitialized_33"
  input: "report_uninitialized_variables_1/IsVariableInitialized_34"
  input: "report_uninitialized_variables_1/IsVariableInitialized_35"
  input: "report_uninitialized_variables_1/IsVariableInitialized_36"
  input: "report_uninitialized_variables_1/IsVariableInitialized_37"
  input: "report_uninitialized_variables_1/IsVariableInitialized_38"
  input: "report_uninitialized_variables_1/IsVariableInitialized_39"
  input: "report_uninitialized_variables_1/IsVariableInitialized_40"
  input: "report_uninitialized_variables_1/IsVariableInitialized_41"
  input: "report_uninitialized_variables_1/IsVariableInitialized_42"
  input: "report_uninitialized_variables_1/IsVariableInitialized_43"
  input: "report_uninitialized_variables_1/IsVariableInitialized_44"
  input: "report_uninitialized_variables_1/IsVariableInitialized_45"
  input: "report_uninitialized_variables_1/IsVariableInitialized_46"
  input: "report_uninitialized_variables_1/IsVariableInitialized_47"
  input: "report_uninitialized_variables_1/IsVariableInitialized_48"
  input: "report_uninitialized_variables_1/IsVariableInitialized_49"
  input: "report_uninitialized_variables_1/IsVariableInitialized_50"
  input: "report_uninitialized_variables_1/IsVariableInitialized_51"
  input: "report_uninitialized_variables_1/IsVariableInitialized_52"
  input: "report_uninitialized_variables_1/IsVariableInitialized_53"
  input: "report_uninitialized_variables_1/IsVariableInitialized_54"
  input: "report_uninitialized_variables_1/IsVariableInitialized_55"
  input: "report_uninitialized_variables_1/IsVariableInitialized_56"
  input: "report_uninitialized_variables_1/IsVariableInitialized_57"
  input: "report_uninitialized_variables_1/IsVariableInitialized_58"
  input: "report_uninitialized_variables_1/IsVariableInitialized_59"
  input: "report_uninitialized_variables_1/IsVariableInitialized_60"
  input: "report_uninitialized_variables_1/IsVariableInitialized_61"
  input: "report_uninitialized_variables_1/IsVariableInitialized_62"
  input: "report_uninitialized_variables_1/IsVariableInitialized_63"
  input: "report_uninitialized_variables_1/IsVariableInitialized_64"
  input: "report_uninitialized_variables_1/IsVariableInitialized_65"
  input: "report_uninitialized_variables_1/IsVariableInitialized_66"
  input: "report_uninitialized_variables_1/IsVariableInitialized_67"
  input: "report_uninitialized_variables_1/IsVariableInitialized_68"
  input: "report_uninitialized_variables_1/IsVariableInitialized_69"
  input: "report_uninitialized_variables_1/IsVariableInitialized_70"
  input: "report_uninitialized_variables_1/IsVariableInitialized_71"
  input: "report_uninitialized_variables_1/IsVariableInitialized_72"
  input: "report_uninitialized_variables_1/IsVariableInitialized_73"
  input: "report_uninitialized_variables_1/IsVariableInitialized_74"
  input: "report_uninitialized_variables_1/IsVariableInitialized_75"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 76
    }
  }
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 76
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/LogicalNot"
  op: "LogicalNot"
  input: "report_uninitialized_variables_1/stack"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 76
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/Const"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 76
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 76
          }
        }
        string_val: "global_step"
        string_val: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
        string_val: "decoder/rnn/lstm_cell/kernel"
        string_val: "decoder/rnn/lstm_cell/bias"
        string_val: "fully_connected/weights"
        string_val: "fully_connected/biases"
        string_val: "train_op/learning_rate"
        string_val: "train_op/beta1_power"
        string_val: "train_op/beta2_power"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/decoder/rnn/lstm_cell/kernel/Adam"
        string_val: "train_op/decoder/rnn/lstm_cell/kernel/Adam_1"
        string_val: "train_op/decoder/rnn/lstm_cell/bias/Adam"
        string_val: "train_op/decoder/rnn/lstm_cell/bias/Adam_1"
        string_val: "train_op/fully_connected/weights/Adam"
        string_val: "train_op/fully_connected/weights/Adam_1"
        string_val: "train_op/fully_connected/biases/Adam"
        string_val: "train_op/fully_connected/biases/Adam_1"
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 76
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Prod"
  op: "Prod"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice"
  input: "report_uninitialized_variables_1/boolean_mask/Prod/reduction_indices"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 76
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  op: "StridedSlice"
  input: "report_uninitialized_variables_1/boolean_mask/Shape_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_1"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1/stack_2"
  device: "/device:CPU:0"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
          }
        }
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/values_0"
  op: "Pack"
  input: "report_uninitialized_variables_1/boolean_mask/Prod"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/concat"
  op: "ConcatV2"
  input: "report_uninitialized_variables_1/boolean_mask/concat/values_0"
  input: "report_uninitialized_variables_1/boolean_mask/strided_slice_1"
  input: "report_uninitialized_variables_1/boolean_mask/concat/axis"
  device: "/device:CPU:0"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape"
  op: "Reshape"
  input: "report_uninitialized_variables_1/Const"
  input: "report_uninitialized_variables_1/boolean_mask/concat"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 76
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  op: "Reshape"
  input: "report_uninitialized_variables_1/LogicalNot"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1/shape"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_BOOL
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 76
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Where"
  op: "Where"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape_1"
  device: "/device:CPU:0"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
          dim {
            size: 1
          }
        }
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  op: "Squeeze"
  input: "report_uninitialized_variables_1/boolean_mask/Where"
  device: "/device:CPU:0"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "squeeze_dims"
    value {
      list {
        i: 1
      }
    }
  }
}
node {
  name: "report_uninitialized_variables_1/boolean_mask/Gather"
  op: "Gather"
  input: "report_uninitialized_variables_1/boolean_mask/Reshape"
  input: "report_uninitialized_variables_1/boolean_mask/Squeeze"
  device: "/device:CPU:0"
  attr {
    key: "Tindices"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "Tparams"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: -1
          }
        }
      }
    }
  }
  attr {
    key: "validate_indices"
    value {
      b: true
    }
  }
}
node {
  name: "init_2"
  op: "NoOp"
}
node {
  name: "init_all_tables"
  op: "NoOp"
}
node {
  name: "group_deps_1"
  op: "NoOp"
  input: "^init_2"
  input: "^init_all_tables"
}
node {
  name: "Merge/MergeSummary"
  op: "MergeSummary"
  input: "enqueue_input/queue/enqueue_input/fifo_queuefraction_over_0_of_1000_full"
  input: "train_op/loss"
  input: "loss_1"
  attr {
    key: "N"
    value {
      i: 3
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/Const"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/StringJoin/inputs_1"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "_temp_bde0767386b54619b9cc38c4f0b8d0aa/part"
      }
    }
  }
}
node {
  name: "save/StringJoin"
  op: "StringJoin"
  input: "save/Const"
  input: "save/StringJoin/inputs_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "separator"
    value {
      s: ""
    }
  }
}
node {
  name: "save/num_shards"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "save/ShardedFilename/shard"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "save/ShardedFilename"
  op: "ShardedFilename"
  input: "save/StringJoin"
  input: "save/ShardedFilename/shard"
  input: "save/num_shards"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 76
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 76
          }
        }
        string_val: "decoder/rnn/lstm_cell/bias"
        string_val: "decoder/rnn/lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
        string_val: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
        string_val: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
        string_val: "fully_connected/biases"
        string_val: "fully_connected/weights"
        string_val: "global_step"
        string_val: "train_op/beta1_power"
        string_val: "train_op/beta2_power"
        string_val: "train_op/decoder/rnn/lstm_cell/bias/Adam"
        string_val: "train_op/decoder/rnn/lstm_cell/bias/Adam_1"
        string_val: "train_op/decoder/rnn/lstm_cell/kernel/Adam"
        string_val: "train_op/decoder/rnn/lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
        string_val: "train_op/fully_connected/biases/Adam"
        string_val: "train_op/fully_connected/biases/Adam_1"
        string_val: "train_op/fully_connected/weights/Adam"
        string_val: "train_op/fully_connected/weights/Adam_1"
        string_val: "train_op/learning_rate"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 76
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 76
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/ShardedFilename"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "decoder/rnn/lstm_cell/bias"
  input: "decoder/rnn/lstm_cell/kernel"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "fully_connected/biases"
  input: "fully_connected/weights"
  input: "global_step"
  input: "train_op/beta1_power"
  input: "train_op/beta2_power"
  input: "train_op/decoder/rnn/lstm_cell/bias/Adam"
  input: "train_op/decoder/rnn/lstm_cell/bias/Adam_1"
  input: "train_op/decoder/rnn/lstm_cell/kernel/Adam"
  input: "train_op/decoder/rnn/lstm_cell/kernel/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "train_op/fully_connected/biases/Adam"
  input: "train_op/fully_connected/biases/Adam_1"
  input: "train_op/fully_connected/weights/Adam"
  input: "train_op/fully_connected/weights/Adam_1"
  input: "train_op/learning_rate"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_INT64
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/ShardedFilename"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/ShardedFilename"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/MergeV2Checkpoints/checkpoint_prefixes"
  op: "Pack"
  input: "save/ShardedFilename"
  input: "^save/control_dependency"
  attr {
    key: "N"
    value {
      i: 1
    }
  }
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "axis"
    value {
      i: 0
    }
  }
}
node {
  name: "save/MergeV2Checkpoints"
  op: "MergeV2Checkpoints"
  input: "save/MergeV2Checkpoints/checkpoint_prefixes"
  input: "save/Const"
  attr {
    key: "delete_old_dirs"
    value {
      b: true
    }
  }
}
node {
  name: "save/Identity"
  op: "Identity"
  input: "save/Const"
  input: "^save/control_dependency"
  input: "^save/MergeV2Checkpoints"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "decoder/rnn/lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "decoder/rnn/lstm_cell/bias"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_1/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "decoder/rnn/lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_1/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_1"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_1/tensor_names"
  input: "save/RestoreV2_1/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "decoder/rnn/lstm_cell/kernel"
  input: "save/RestoreV2_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_2/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_2/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_2/tensor_names"
  input: "save/RestoreV2_2/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "save/RestoreV2_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_3/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_3/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_3"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_3/tensor_names"
  input: "save/RestoreV2_3/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "save/RestoreV2_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_4/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_4/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_4"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_4/tensor_names"
  input: "save/RestoreV2_4/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "save/RestoreV2_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_5/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_5/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_5"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_5/tensor_names"
  input: "save/RestoreV2_5/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "save/RestoreV2_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_6/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_6/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_6"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_6/tensor_names"
  input: "save/RestoreV2_6/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "save/RestoreV2_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_7/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_7/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_7"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_7/tensor_names"
  input: "save/RestoreV2_7/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "save/RestoreV2_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_8/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_8/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_8"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_8/tensor_names"
  input: "save/RestoreV2_8/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "save/RestoreV2_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_9/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_9/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_9"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_9/tensor_names"
  input: "save/RestoreV2_9/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "save/RestoreV2_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_10/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_10/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_10"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_10/tensor_names"
  input: "save/RestoreV2_10/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "save/RestoreV2_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_11/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_11/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_11"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_11/tensor_names"
  input: "save/RestoreV2_11/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "save/RestoreV2_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_12/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_12/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_12"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_12/tensor_names"
  input: "save/RestoreV2_12/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "save/RestoreV2_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_13/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_13/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_13"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_13/tensor_names"
  input: "save/RestoreV2_13/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "save/RestoreV2_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_14/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_14/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_14"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_14/tensor_names"
  input: "save/RestoreV2_14/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "save/RestoreV2_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_15/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_15/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_15"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_15/tensor_names"
  input: "save/RestoreV2_15/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "save/RestoreV2_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_16/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_16/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_16"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_16/tensor_names"
  input: "save/RestoreV2_16/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "save/RestoreV2_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_17/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_17/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_17"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_17/tensor_names"
  input: "save/RestoreV2_17/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "save/RestoreV2_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_18/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_18/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_18"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_18/tensor_names"
  input: "save/RestoreV2_18/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
  input: "save/RestoreV2_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_19/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_19/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_19"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_19/tensor_names"
  input: "save/RestoreV2_19/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
  input: "save/RestoreV2_19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_20/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
}
node {
  name: "save/RestoreV2_20/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_20"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_20/tensor_names"
  input: "save/RestoreV2_20/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
  input: "save/RestoreV2_20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_21/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
}
node {
  name: "save/RestoreV2_21/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_21"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_21/tensor_names"
  input: "save/RestoreV2_21/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
  input: "save/RestoreV2_21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_22/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fully_connected/biases"
      }
    }
  }
}
node {
  name: "save/RestoreV2_22/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_22"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_22/tensor_names"
  input: "save/RestoreV2_22/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "fully_connected/biases"
  input: "save/RestoreV2_22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_23/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "fully_connected/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2_23/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_23"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_23/tensor_names"
  input: "save/RestoreV2_23/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "fully_connected/weights"
  input: "save/RestoreV2_23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_24/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "global_step"
      }
    }
  }
}
node {
  name: "save/RestoreV2_24/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_24"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_24/tensor_names"
  input: "save/RestoreV2_24/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_INT64
      }
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "global_step"
  input: "save/RestoreV2_24"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@global_step"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_25/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/beta1_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2_25/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_25"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_25/tensor_names"
  input: "save/RestoreV2_25/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "train_op/beta1_power"
  input: "save/RestoreV2_25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_26/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/beta2_power"
      }
    }
  }
}
node {
  name: "save/RestoreV2_26/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_26"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_26/tensor_names"
  input: "save/RestoreV2_26/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "train_op/beta2_power"
  input: "save/RestoreV2_26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_27/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/decoder/rnn/lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_27/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_27"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_27/tensor_names"
  input: "save/RestoreV2_27/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "train_op/decoder/rnn/lstm_cell/bias/Adam"
  input: "save/RestoreV2_27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_28/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/decoder/rnn/lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_28/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_28"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_28/tensor_names"
  input: "save/RestoreV2_28/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "train_op/decoder/rnn/lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_29/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/decoder/rnn/lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_29/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_29"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_29/tensor_names"
  input: "save/RestoreV2_29/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "train_op/decoder/rnn/lstm_cell/kernel/Adam"
  input: "save/RestoreV2_29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_30/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/decoder/rnn/lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_30/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_30"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_30/tensor_names"
  input: "save/RestoreV2_30/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "train_op/decoder/rnn/lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/rnn/lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 56
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_31/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_31/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_31"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_31/tensor_names"
  input: "save/RestoreV2_31/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "save/RestoreV2_31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_32/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_32/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_32"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_32/tensor_names"
  input: "save/RestoreV2_32/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_33/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_33/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_33"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_33/tensor_names"
  input: "save/RestoreV2_33/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "save/RestoreV2_33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_34/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_34/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_34"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_34/tensor_names"
  input: "save/RestoreV2_34/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_35/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_35/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_35"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_35/tensor_names"
  input: "save/RestoreV2_35/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "save/RestoreV2_35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_36/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_36/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_36"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_36/tensor_names"
  input: "save/RestoreV2_36/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_37/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_37/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_37"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_37/tensor_names"
  input: "save/RestoreV2_37/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "save/RestoreV2_37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_38/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_38/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_38"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_38/tensor_names"
  input: "save/RestoreV2_38/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_0/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_39/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_39/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_39"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_39/tensor_names"
  input: "save/RestoreV2_39/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "save/RestoreV2_39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_40/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_40/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_40"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_40/tensor_names"
  input: "save/RestoreV2_40/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_41/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_41/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_41"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_41/tensor_names"
  input: "save/RestoreV2_41/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "save/RestoreV2_41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_42/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_42/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_42"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_42/tensor_names"
  input: "save/RestoreV2_42/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_43/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_43/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_43"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_43/tensor_names"
  input: "save/RestoreV2_43/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "save/RestoreV2_43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_44/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_44/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_44"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_44/tensor_names"
  input: "save/RestoreV2_44/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_45/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_45/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_45"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_45/tensor_names"
  input: "save/RestoreV2_45/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "save/RestoreV2_45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_46/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_46/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_46"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_46/tensor_names"
  input: "save/RestoreV2_46/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_1/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_47/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_47/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_47"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_47/tensor_names"
  input: "save/RestoreV2_47/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "save/RestoreV2_47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_48/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_48/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_48"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_48/tensor_names"
  input: "save/RestoreV2_48/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_49/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_49/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_49"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_49/tensor_names"
  input: "save/RestoreV2_49/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_49"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "save/RestoreV2_49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_50/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_50/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_50"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_50/tensor_names"
  input: "save/RestoreV2_50/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_50"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_51/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_51/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_51"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_51/tensor_names"
  input: "save/RestoreV2_51/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_51"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "save/RestoreV2_51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_52/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_52/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_52"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_52/tensor_names"
  input: "save/RestoreV2_52/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_52"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_53/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_53/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_53"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_53/tensor_names"
  input: "save/RestoreV2_53/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_53"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "save/RestoreV2_53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_54/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_54/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_54"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_54/tensor_names"
  input: "save/RestoreV2_54/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_54"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_2/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_55/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_55/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_55"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_55/tensor_names"
  input: "save/RestoreV2_55/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_55"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "save/RestoreV2_55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_56/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_56/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_56"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_56/tensor_names"
  input: "save/RestoreV2_56/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_56"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_57/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_57/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_57"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_57/tensor_names"
  input: "save/RestoreV2_57/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_57"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "save/RestoreV2_57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_58/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_58/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_58"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_58/tensor_names"
  input: "save/RestoreV2_58/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_58"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_59/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_59/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_59"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_59/tensor_names"
  input: "save/RestoreV2_59/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_59"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "save/RestoreV2_59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_60/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_60/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_60"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_60/tensor_names"
  input: "save/RestoreV2_60/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_60"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_61/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_61/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_61"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_61/tensor_names"
  input: "save/RestoreV2_61/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_61"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "save/RestoreV2_61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_62/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_62/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_62"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_62/tensor_names"
  input: "save/RestoreV2_62/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_62"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_3/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_63/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_63/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_63"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_63/tensor_names"
  input: "save/RestoreV2_63/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_63"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam"
  input: "save/RestoreV2_63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_64/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_64/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_64"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_64/tensor_names"
  input: "save/RestoreV2_64/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_64"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_65/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_65/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_65"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_65/tensor_names"
  input: "save/RestoreV2_65/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_65"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam"
  input: "save/RestoreV2_65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_66/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_66/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_66"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_66/tensor_names"
  input: "save/RestoreV2_66/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_66"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/bw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_67/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_67/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_67"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_67/tensor_names"
  input: "save/RestoreV2_67/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_67"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam"
  input: "save/RestoreV2_67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_68/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_68/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_68"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_68/tensor_names"
  input: "save/RestoreV2_68/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_68"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias/Adam_1"
  input: "save/RestoreV2_68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/bias"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_69/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_69/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_69"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_69/tensor_names"
  input: "save/RestoreV2_69/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_69"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam"
  input: "save/RestoreV2_69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_70/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_70/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_70"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_70/tensor_names"
  input: "save/RestoreV2_70/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_70"
  op: "Assign"
  input: "train_op/encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel/Adam_1"
  input: "save/RestoreV2_70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/stack_bidirectional_rnn/cell_4/bidirectional_rnn/fw/basic_lstm_cell/kernel"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 21
          }
          dim {
            size: 28
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_71/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/fully_connected/biases/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_71/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_71"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_71/tensor_names"
  input: "save/RestoreV2_71/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_71"
  op: "Assign"
  input: "train_op/fully_connected/biases/Adam"
  input: "save/RestoreV2_71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_72/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/fully_connected/biases/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_72/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_72"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_72/tensor_names"
  input: "save/RestoreV2_72/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_72"
  op: "Assign"
  input: "train_op/fully_connected/biases/Adam_1"
  input: "save/RestoreV2_72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/biases"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_73/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/fully_connected/weights/Adam"
      }
    }
  }
}
node {
  name: "save/RestoreV2_73/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_73"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_73/tensor_names"
  input: "save/RestoreV2_73/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_73"
  op: "Assign"
  input: "train_op/fully_connected/weights/Adam"
  input: "save/RestoreV2_73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_74/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/fully_connected/weights/Adam_1"
      }
    }
  }
}
node {
  name: "save/RestoreV2_74/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_74"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_74/tensor_names"
  input: "save/RestoreV2_74/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_74"
  op: "Assign"
  input: "train_op/fully_connected/weights/Adam_1"
  input: "save/RestoreV2_74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@fully_connected/weights"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 14
          }
          dim {
            size: 7
          }
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/RestoreV2_75/tensor_names"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: "train_op/learning_rate"
      }
    }
  }
}
node {
  name: "save/RestoreV2_75/shape_and_slices"
  op: "Const"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          dim {
            size: 1
          }
        }
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 1
          }
        }
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2_75"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2_75/tensor_names"
  input: "save/RestoreV2_75/shape_and_slices"
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
          unknown_rank: true
        }
      }
    }
  }
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign_75"
  op: "Assign"
  input: "train_op/learning_rate"
  input: "save/RestoreV2_75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@train_op/learning_rate"
      }
    }
  }
  attr {
    key: "_output_shapes"
    value {
      list {
        shape {
        }
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_shard"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_2"
  input: "^save/Assign_3"
  input: "^save/Assign_4"
  input: "^save/Assign_5"
  input: "^save/Assign_6"
  input: "^save/Assign_7"
  input: "^save/Assign_8"
  input: "^save/Assign_9"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
  input: "^save/Assign_49"
  input: "^save/Assign_50"
  input: "^save/Assign_51"
  input: "^save/Assign_52"
  input: "^save/Assign_53"
  input: "^save/Assign_54"
  input: "^save/Assign_55"
  input: "^save/Assign_56"
  input: "^save/Assign_57"
  input: "^save/Assign_58"
  input: "^save/Assign_59"
  input: "^save/Assign_60"
  input: "^save/Assign_61"
  input: "^save/Assign_62"
  input: "^save/Assign_63"
  input: "^save/Assign_64"
  input: "^save/Assign_65"
  input: "^save/Assign_66"
  input: "^save/Assign_67"
  input: "^save/Assign_68"
  input: "^save/Assign_69"
  input: "^save/Assign_70"
  input: "^save/Assign_71"
  input: "^save/Assign_72"
  input: "^save/Assign_73"
  input: "^save/Assign_74"
  input: "^save/Assign_75"
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/restore_shard"
}
versions {
  producer: 24
}
